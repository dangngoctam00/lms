// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-class/ent/examhistory"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/flume/enthistory"
)

// ExamHistoryCreate is the builder for creating a ExamHistory entity.
type ExamHistoryCreate struct {
	config
	mutation *ExamHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (ehc *ExamHistoryCreate) SetHistoryTime(t time.Time) *ExamHistoryCreate {
	ehc.mutation.SetHistoryTime(t)
	return ehc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (ehc *ExamHistoryCreate) SetNillableHistoryTime(t *time.Time) *ExamHistoryCreate {
	if t != nil {
		ehc.SetHistoryTime(*t)
	}
	return ehc
}

// SetOperation sets the "operation" field.
func (ehc *ExamHistoryCreate) SetOperation(et enthistory.OpType) *ExamHistoryCreate {
	ehc.mutation.SetOperation(et)
	return ehc
}

// SetRef sets the "ref" field.
func (ehc *ExamHistoryCreate) SetRef(i int) *ExamHistoryCreate {
	ehc.mutation.SetRef(i)
	return ehc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (ehc *ExamHistoryCreate) SetNillableRef(i *int) *ExamHistoryCreate {
	if i != nil {
		ehc.SetRef(*i)
	}
	return ehc
}

// SetUpdatedBy sets the "updated_by" field.
func (ehc *ExamHistoryCreate) SetUpdatedBy(i int) *ExamHistoryCreate {
	ehc.mutation.SetUpdatedBy(i)
	return ehc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ehc *ExamHistoryCreate) SetNillableUpdatedBy(i *int) *ExamHistoryCreate {
	if i != nil {
		ehc.SetUpdatedBy(*i)
	}
	return ehc
}

// SetTitle sets the "title" field.
func (ehc *ExamHistoryCreate) SetTitle(s string) *ExamHistoryCreate {
	ehc.mutation.SetTitle(s)
	return ehc
}

// SetContext sets the "context" field.
func (ehc *ExamHistoryCreate) SetContext(s string) *ExamHistoryCreate {
	ehc.mutation.SetContext(s)
	return ehc
}

// SetContextId sets the "contextId" field.
func (ehc *ExamHistoryCreate) SetContextId(s string) *ExamHistoryCreate {
	ehc.mutation.SetContextId(s)
	return ehc
}

// SetIsPublished sets the "isPublished" field.
func (ehc *ExamHistoryCreate) SetIsPublished(b bool) *ExamHistoryCreate {
	ehc.mutation.SetIsPublished(b)
	return ehc
}

// SetHavingDraft sets the "havingDraft" field.
func (ehc *ExamHistoryCreate) SetHavingDraft(b bool) *ExamHistoryCreate {
	ehc.mutation.SetHavingDraft(b)
	return ehc
}

// SetLastPublishedAt sets the "lastPublishedAt" field.
func (ehc *ExamHistoryCreate) SetLastPublishedAt(t time.Time) *ExamHistoryCreate {
	ehc.mutation.SetLastPublishedAt(t)
	return ehc
}

// SetNillableLastPublishedAt sets the "lastPublishedAt" field if the given value is not nil.
func (ehc *ExamHistoryCreate) SetNillableLastPublishedAt(t *time.Time) *ExamHistoryCreate {
	if t != nil {
		ehc.SetLastPublishedAt(*t)
	}
	return ehc
}

// SetUpdatedAt sets the "updatedAt" field.
func (ehc *ExamHistoryCreate) SetUpdatedAt(t time.Time) *ExamHistoryCreate {
	ehc.mutation.SetUpdatedAt(t)
	return ehc
}

// Mutation returns the ExamHistoryMutation object of the builder.
func (ehc *ExamHistoryCreate) Mutation() *ExamHistoryMutation {
	return ehc.mutation
}

// Save creates the ExamHistory in the database.
func (ehc *ExamHistoryCreate) Save(ctx context.Context) (*ExamHistory, error) {
	ehc.defaults()
	return withHooks(ctx, ehc.sqlSave, ehc.mutation, ehc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ehc *ExamHistoryCreate) SaveX(ctx context.Context) *ExamHistory {
	v, err := ehc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ehc *ExamHistoryCreate) Exec(ctx context.Context) error {
	_, err := ehc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehc *ExamHistoryCreate) ExecX(ctx context.Context) {
	if err := ehc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ehc *ExamHistoryCreate) defaults() {
	if _, ok := ehc.mutation.HistoryTime(); !ok {
		v := examhistory.DefaultHistoryTime()
		ehc.mutation.SetHistoryTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ehc *ExamHistoryCreate) check() error {
	if _, ok := ehc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`ent: missing required field "ExamHistory.history_time"`)}
	}
	if _, ok := ehc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "ExamHistory.operation"`)}
	}
	if v, ok := ehc.mutation.Operation(); ok {
		if err := examhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "ExamHistory.operation": %w`, err)}
		}
	}
	if _, ok := ehc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "ExamHistory.title"`)}
	}
	if _, ok := ehc.mutation.Context(); !ok {
		return &ValidationError{Name: "context", err: errors.New(`ent: missing required field "ExamHistory.context"`)}
	}
	if _, ok := ehc.mutation.ContextId(); !ok {
		return &ValidationError{Name: "contextId", err: errors.New(`ent: missing required field "ExamHistory.contextId"`)}
	}
	if _, ok := ehc.mutation.IsPublished(); !ok {
		return &ValidationError{Name: "isPublished", err: errors.New(`ent: missing required field "ExamHistory.isPublished"`)}
	}
	if _, ok := ehc.mutation.HavingDraft(); !ok {
		return &ValidationError{Name: "havingDraft", err: errors.New(`ent: missing required field "ExamHistory.havingDraft"`)}
	}
	if _, ok := ehc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updatedAt", err: errors.New(`ent: missing required field "ExamHistory.updatedAt"`)}
	}
	return nil
}

func (ehc *ExamHistoryCreate) sqlSave(ctx context.Context) (*ExamHistory, error) {
	if err := ehc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ehc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ehc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ehc.mutation.id = &_node.ID
	ehc.mutation.done = true
	return _node, nil
}

func (ehc *ExamHistoryCreate) createSpec() (*ExamHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &ExamHistory{config: ehc.config}
		_spec = sqlgraph.NewCreateSpec(examhistory.Table, sqlgraph.NewFieldSpec(examhistory.FieldID, field.TypeInt))
	)
	if value, ok := ehc.mutation.HistoryTime(); ok {
		_spec.SetField(examhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := ehc.mutation.Operation(); ok {
		_spec.SetField(examhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := ehc.mutation.Ref(); ok {
		_spec.SetField(examhistory.FieldRef, field.TypeInt, value)
		_node.Ref = value
	}
	if value, ok := ehc.mutation.UpdatedBy(); ok {
		_spec.SetField(examhistory.FieldUpdatedBy, field.TypeInt, value)
		_node.UpdatedBy = &value
	}
	if value, ok := ehc.mutation.Title(); ok {
		_spec.SetField(examhistory.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ehc.mutation.Context(); ok {
		_spec.SetField(examhistory.FieldContext, field.TypeString, value)
		_node.Context = value
	}
	if value, ok := ehc.mutation.ContextId(); ok {
		_spec.SetField(examhistory.FieldContextId, field.TypeString, value)
		_node.ContextId = value
	}
	if value, ok := ehc.mutation.IsPublished(); ok {
		_spec.SetField(examhistory.FieldIsPublished, field.TypeBool, value)
		_node.IsPublished = value
	}
	if value, ok := ehc.mutation.HavingDraft(); ok {
		_spec.SetField(examhistory.FieldHavingDraft, field.TypeBool, value)
		_node.HavingDraft = value
	}
	if value, ok := ehc.mutation.LastPublishedAt(); ok {
		_spec.SetField(examhistory.FieldLastPublishedAt, field.TypeTime, value)
		_node.LastPublishedAt = &value
	}
	if value, ok := ehc.mutation.UpdatedAt(); ok {
		_spec.SetField(examhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ExamHistoryCreateBulk is the builder for creating many ExamHistory entities in bulk.
type ExamHistoryCreateBulk struct {
	config
	builders []*ExamHistoryCreate
}

// Save creates the ExamHistory entities in the database.
func (ehcb *ExamHistoryCreateBulk) Save(ctx context.Context) ([]*ExamHistory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ehcb.builders))
	nodes := make([]*ExamHistory, len(ehcb.builders))
	mutators := make([]Mutator, len(ehcb.builders))
	for i := range ehcb.builders {
		func(i int, root context.Context) {
			builder := ehcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExamHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ehcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ehcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ehcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ehcb *ExamHistoryCreateBulk) SaveX(ctx context.Context) []*ExamHistory {
	v, err := ehcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ehcb *ExamHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := ehcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehcb *ExamHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := ehcb.Exec(ctx); err != nil {
		panic(err)
	}
}
