// Code generated by enthistory, DO NOT EDIT.
package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/schema"
	"entgo.io/ent/schema/field"

	"github.com/flume/enthistory"

	"time"
)

// ExamHistory holds the schema definition for the ExamHistory entity.
type ExamHistory struct {
	ent.Schema
}

// Annotations of the ExamHistory.
func (ExamHistory) Annotations() []schema.Annotation {
	return []schema.Annotation{
		entsql.Annotation{
			Table: "exam_history",
		},
        enthistory.Annotations{
            IsHistory: true,
            Exclude: true,
        },
	}
}

// Fields of the ExamHistory.
func (ExamHistory) Fields() []ent.Field {
	historyFields := []ent.Field{
        field.Time("history_time").
            Default(time.Now).
            Immutable(),
        field.Int("ref").
            Immutable().
            Optional(),
        field.Enum("operation").
            GoType(enthistory.OpType("")).
            Immutable(),
        field.Int("updated_by").
            Optional().
            Immutable().
            Nillable(),
    }


    original := Exam{}
    for _, field := range original.Fields() {
        if field.Descriptor().Name != "id" {
            historyFields = append(historyFields, field)
        }
    }

    return historyFields
}

// Mixin of the ExamHistory.
func (ExamHistory) Mixin() []ent.Mixin {
	return Exam{}.Mixin()
}
