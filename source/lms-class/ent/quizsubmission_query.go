// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"lms-class/ent/predicate"
	"lms-class/ent/quiz"
	"lms-class/ent/quizsubmission"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuizSubmissionQuery is the builder for querying QuizSubmission entities.
type QuizSubmissionQuery struct {
	config
	ctx        *QueryContext
	order      []quizsubmission.OrderOption
	inters     []Interceptor
	predicates []predicate.QuizSubmission
	withQuiz   *QuizQuery
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuizSubmissionQuery builder.
func (qsq *QuizSubmissionQuery) Where(ps ...predicate.QuizSubmission) *QuizSubmissionQuery {
	qsq.predicates = append(qsq.predicates, ps...)
	return qsq
}

// Limit the number of records to be returned by this query.
func (qsq *QuizSubmissionQuery) Limit(limit int) *QuizSubmissionQuery {
	qsq.ctx.Limit = &limit
	return qsq
}

// Offset to start from.
func (qsq *QuizSubmissionQuery) Offset(offset int) *QuizSubmissionQuery {
	qsq.ctx.Offset = &offset
	return qsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qsq *QuizSubmissionQuery) Unique(unique bool) *QuizSubmissionQuery {
	qsq.ctx.Unique = &unique
	return qsq
}

// Order specifies how the records should be ordered.
func (qsq *QuizSubmissionQuery) Order(o ...quizsubmission.OrderOption) *QuizSubmissionQuery {
	qsq.order = append(qsq.order, o...)
	return qsq
}

// QueryQuiz chains the current query on the "quiz" edge.
func (qsq *QuizSubmissionQuery) QueryQuiz() *QuizQuery {
	query := (&QuizClient{config: qsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quizsubmission.Table, quizsubmission.FieldID, selector),
			sqlgraph.To(quiz.Table, quiz.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, quizsubmission.QuizTable, quizsubmission.QuizColumn),
		)
		fromU = sqlgraph.SetNeighbors(qsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first QuizSubmission entity from the query.
// Returns a *NotFoundError when no QuizSubmission was found.
func (qsq *QuizSubmissionQuery) First(ctx context.Context) (*QuizSubmission, error) {
	nodes, err := qsq.Limit(1).All(setContextOp(ctx, qsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{quizsubmission.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) FirstX(ctx context.Context) *QuizSubmission {
	node, err := qsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first QuizSubmission ID from the query.
// Returns a *NotFoundError when no QuizSubmission ID was found.
func (qsq *QuizSubmissionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qsq.Limit(1).IDs(setContextOp(ctx, qsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{quizsubmission.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) FirstIDX(ctx context.Context) int {
	id, err := qsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single QuizSubmission entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one QuizSubmission entity is found.
// Returns a *NotFoundError when no QuizSubmission entities are found.
func (qsq *QuizSubmissionQuery) Only(ctx context.Context) (*QuizSubmission, error) {
	nodes, err := qsq.Limit(2).All(setContextOp(ctx, qsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{quizsubmission.Label}
	default:
		return nil, &NotSingularError{quizsubmission.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) OnlyX(ctx context.Context) *QuizSubmission {
	node, err := qsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only QuizSubmission ID in the query.
// Returns a *NotSingularError when more than one QuizSubmission ID is found.
// Returns a *NotFoundError when no entities are found.
func (qsq *QuizSubmissionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qsq.Limit(2).IDs(setContextOp(ctx, qsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{quizsubmission.Label}
	default:
		err = &NotSingularError{quizsubmission.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) OnlyIDX(ctx context.Context) int {
	id, err := qsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of QuizSubmissions.
func (qsq *QuizSubmissionQuery) All(ctx context.Context) ([]*QuizSubmission, error) {
	ctx = setContextOp(ctx, qsq.ctx, "All")
	if err := qsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*QuizSubmission, *QuizSubmissionQuery]()
	return withInterceptors[[]*QuizSubmission](ctx, qsq, qr, qsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) AllX(ctx context.Context) []*QuizSubmission {
	nodes, err := qsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of QuizSubmission IDs.
func (qsq *QuizSubmissionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if qsq.ctx.Unique == nil && qsq.path != nil {
		qsq.Unique(true)
	}
	ctx = setContextOp(ctx, qsq.ctx, "IDs")
	if err = qsq.Select(quizsubmission.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) IDsX(ctx context.Context) []int {
	ids, err := qsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qsq *QuizSubmissionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qsq.ctx, "Count")
	if err := qsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qsq, querierCount[*QuizSubmissionQuery](), qsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) CountX(ctx context.Context) int {
	count, err := qsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qsq *QuizSubmissionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qsq.ctx, "Exist")
	switch _, err := qsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qsq *QuizSubmissionQuery) ExistX(ctx context.Context) bool {
	exist, err := qsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuizSubmissionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qsq *QuizSubmissionQuery) Clone() *QuizSubmissionQuery {
	if qsq == nil {
		return nil
	}
	return &QuizSubmissionQuery{
		config:     qsq.config,
		ctx:        qsq.ctx.Clone(),
		order:      append([]quizsubmission.OrderOption{}, qsq.order...),
		inters:     append([]Interceptor{}, qsq.inters...),
		predicates: append([]predicate.QuizSubmission{}, qsq.predicates...),
		withQuiz:   qsq.withQuiz.Clone(),
		// clone intermediate query.
		sql:  qsq.sql.Clone(),
		path: qsq.path,
	}
}

// WithQuiz tells the query-builder to eager-load the nodes that are connected to
// the "quiz" edge. The optional arguments are used to configure the query builder of the edge.
func (qsq *QuizSubmissionQuery) WithQuiz(opts ...func(*QuizQuery)) *QuizSubmissionQuery {
	query := (&QuizClient{config: qsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qsq.withQuiz = query
	return qsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		QuizId int `json:"quizId,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.QuizSubmission.Query().
//		GroupBy(quizsubmission.FieldQuizId).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qsq *QuizSubmissionQuery) GroupBy(field string, fields ...string) *QuizSubmissionGroupBy {
	qsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuizSubmissionGroupBy{build: qsq}
	grbuild.flds = &qsq.ctx.Fields
	grbuild.label = quizsubmission.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		QuizId int `json:"quizId,omitempty"`
//	}
//
//	client.QuizSubmission.Query().
//		Select(quizsubmission.FieldQuizId).
//		Scan(ctx, &v)
func (qsq *QuizSubmissionQuery) Select(fields ...string) *QuizSubmissionSelect {
	qsq.ctx.Fields = append(qsq.ctx.Fields, fields...)
	sbuild := &QuizSubmissionSelect{QuizSubmissionQuery: qsq}
	sbuild.label = quizsubmission.Label
	sbuild.flds, sbuild.scan = &qsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuizSubmissionSelect configured with the given aggregations.
func (qsq *QuizSubmissionQuery) Aggregate(fns ...AggregateFunc) *QuizSubmissionSelect {
	return qsq.Select().Aggregate(fns...)
}

func (qsq *QuizSubmissionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qsq); err != nil {
				return err
			}
		}
	}
	for _, f := range qsq.ctx.Fields {
		if !quizsubmission.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qsq.path != nil {
		prev, err := qsq.path(ctx)
		if err != nil {
			return err
		}
		qsq.sql = prev
	}
	return nil
}

func (qsq *QuizSubmissionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*QuizSubmission, error) {
	var (
		nodes       = []*QuizSubmission{}
		_spec       = qsq.querySpec()
		loadedTypes = [1]bool{
			qsq.withQuiz != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*QuizSubmission).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &QuizSubmission{config: qsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(qsq.modifiers) > 0 {
		_spec.Modifiers = qsq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qsq.withQuiz; query != nil {
		if err := qsq.loadQuiz(ctx, query, nodes, nil,
			func(n *QuizSubmission, e *Quiz) { n.Edges.Quiz = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qsq *QuizSubmissionQuery) loadQuiz(ctx context.Context, query *QuizQuery, nodes []*QuizSubmission, init func(*QuizSubmission), assign func(*QuizSubmission, *Quiz)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*QuizSubmission)
	for i := range nodes {
		fk := nodes[i].QuizId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(quiz.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "quizId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (qsq *QuizSubmissionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qsq.querySpec()
	if len(qsq.modifiers) > 0 {
		_spec.Modifiers = qsq.modifiers
	}
	_spec.Node.Columns = qsq.ctx.Fields
	if len(qsq.ctx.Fields) > 0 {
		_spec.Unique = qsq.ctx.Unique != nil && *qsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qsq.driver, _spec)
}

func (qsq *QuizSubmissionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(quizsubmission.Table, quizsubmission.Columns, sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt))
	_spec.From = qsq.sql
	if unique := qsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qsq.path != nil {
		_spec.Unique = true
	}
	if fields := qsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quizsubmission.FieldID)
		for i := range fields {
			if fields[i] != quizsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if qsq.withQuiz != nil {
			_spec.Node.AddColumnOnce(quizsubmission.FieldQuizId)
		}
	}
	if ps := qsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qsq *QuizSubmissionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qsq.driver.Dialect())
	t1 := builder.Table(quizsubmission.Table)
	columns := qsq.ctx.Fields
	if len(columns) == 0 {
		columns = quizsubmission.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qsq.sql != nil {
		selector = qsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qsq.ctx.Unique != nil && *qsq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range qsq.modifiers {
		m(selector)
	}
	for _, p := range qsq.predicates {
		p(selector)
	}
	for _, p := range qsq.order {
		p(selector)
	}
	if offset := qsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (qsq *QuizSubmissionQuery) ForUpdate(opts ...sql.LockOption) *QuizSubmissionQuery {
	if qsq.driver.Dialect() == dialect.Postgres {
		qsq.Unique(false)
	}
	qsq.modifiers = append(qsq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return qsq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (qsq *QuizSubmissionQuery) ForShare(opts ...sql.LockOption) *QuizSubmissionQuery {
	if qsq.driver.Dialect() == dialect.Postgres {
		qsq.Unique(false)
	}
	qsq.modifiers = append(qsq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return qsq
}

// QuizSubmissionGroupBy is the group-by builder for QuizSubmission entities.
type QuizSubmissionGroupBy struct {
	selector
	build *QuizSubmissionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qsgb *QuizSubmissionGroupBy) Aggregate(fns ...AggregateFunc) *QuizSubmissionGroupBy {
	qsgb.fns = append(qsgb.fns, fns...)
	return qsgb
}

// Scan applies the selector query and scans the result into the given value.
func (qsgb *QuizSubmissionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qsgb.build.ctx, "GroupBy")
	if err := qsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuizSubmissionQuery, *QuizSubmissionGroupBy](ctx, qsgb.build, qsgb, qsgb.build.inters, v)
}

func (qsgb *QuizSubmissionGroupBy) sqlScan(ctx context.Context, root *QuizSubmissionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qsgb.fns))
	for _, fn := range qsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qsgb.flds)+len(qsgb.fns))
		for _, f := range *qsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuizSubmissionSelect is the builder for selecting fields of QuizSubmission entities.
type QuizSubmissionSelect struct {
	*QuizSubmissionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qss *QuizSubmissionSelect) Aggregate(fns ...AggregateFunc) *QuizSubmissionSelect {
	qss.fns = append(qss.fns, fns...)
	return qss
}

// Scan applies the selector query and scans the result into the given value.
func (qss *QuizSubmissionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qss.ctx, "Select")
	if err := qss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuizSubmissionQuery, *QuizSubmissionSelect](ctx, qss.QuizSubmissionQuery, qss, qss.inters, v)
}

func (qss *QuizSubmissionSelect) sqlScan(ctx context.Context, root *QuizSubmissionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qss.fns))
	for _, fn := range qss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
