// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"lms-class/ent/exam"
	"lms-class/ent/predicate"
	"lms-class/ent/quiz"
	"lms-class/ent/quizsubmission"
	"math"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuizQuery is the builder for querying Quiz entities.
type QuizQuery struct {
	config
	ctx             *QueryContext
	order           []quiz.OrderOption
	inters          []Interceptor
	predicates      []predicate.Quiz
	withExam        *ExamQuery
	withSubmissions *QuizSubmissionQuery
	modifiers       []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuizQuery builder.
func (qq *QuizQuery) Where(ps ...predicate.Quiz) *QuizQuery {
	qq.predicates = append(qq.predicates, ps...)
	return qq
}

// Limit the number of records to be returned by this query.
func (qq *QuizQuery) Limit(limit int) *QuizQuery {
	qq.ctx.Limit = &limit
	return qq
}

// Offset to start from.
func (qq *QuizQuery) Offset(offset int) *QuizQuery {
	qq.ctx.Offset = &offset
	return qq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qq *QuizQuery) Unique(unique bool) *QuizQuery {
	qq.ctx.Unique = &unique
	return qq
}

// Order specifies how the records should be ordered.
func (qq *QuizQuery) Order(o ...quiz.OrderOption) *QuizQuery {
	qq.order = append(qq.order, o...)
	return qq
}

// QueryExam chains the current query on the "exam" edge.
func (qq *QuizQuery) QueryExam() *ExamQuery {
	query := (&ExamClient{config: qq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, selector),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, quiz.ExamTable, quiz.ExamColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubmissions chains the current query on the "submissions" edge.
func (qq *QuizQuery) QuerySubmissions() *QuizSubmissionQuery {
	query := (&QuizSubmissionClient{config: qq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, selector),
			sqlgraph.To(quizsubmission.Table, quizsubmission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quiz.SubmissionsTable, quiz.SubmissionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Quiz entity from the query.
// Returns a *NotFoundError when no Quiz was found.
func (qq *QuizQuery) First(ctx context.Context) (*Quiz, error) {
	nodes, err := qq.Limit(1).All(setContextOp(ctx, qq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{quiz.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qq *QuizQuery) FirstX(ctx context.Context) *Quiz {
	node, err := qq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Quiz ID from the query.
// Returns a *NotFoundError when no Quiz ID was found.
func (qq *QuizQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(1).IDs(setContextOp(ctx, qq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{quiz.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qq *QuizQuery) FirstIDX(ctx context.Context) int {
	id, err := qq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Quiz entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Quiz entity is found.
// Returns a *NotFoundError when no Quiz entities are found.
func (qq *QuizQuery) Only(ctx context.Context) (*Quiz, error) {
	nodes, err := qq.Limit(2).All(setContextOp(ctx, qq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{quiz.Label}
	default:
		return nil, &NotSingularError{quiz.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qq *QuizQuery) OnlyX(ctx context.Context) *Quiz {
	node, err := qq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Quiz ID in the query.
// Returns a *NotSingularError when more than one Quiz ID is found.
// Returns a *NotFoundError when no entities are found.
func (qq *QuizQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(2).IDs(setContextOp(ctx, qq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = &NotSingularError{quiz.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qq *QuizQuery) OnlyIDX(ctx context.Context) int {
	id, err := qq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Quizs.
func (qq *QuizQuery) All(ctx context.Context) ([]*Quiz, error) {
	ctx = setContextOp(ctx, qq.ctx, "All")
	if err := qq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Quiz, *QuizQuery]()
	return withInterceptors[[]*Quiz](ctx, qq, qr, qq.inters)
}

// AllX is like All, but panics if an error occurs.
func (qq *QuizQuery) AllX(ctx context.Context) []*Quiz {
	nodes, err := qq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Quiz IDs.
func (qq *QuizQuery) IDs(ctx context.Context) (ids []int, err error) {
	if qq.ctx.Unique == nil && qq.path != nil {
		qq.Unique(true)
	}
	ctx = setContextOp(ctx, qq.ctx, "IDs")
	if err = qq.Select(quiz.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qq *QuizQuery) IDsX(ctx context.Context) []int {
	ids, err := qq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qq *QuizQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, qq.ctx, "Count")
	if err := qq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, qq, querierCount[*QuizQuery](), qq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (qq *QuizQuery) CountX(ctx context.Context) int {
	count, err := qq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qq *QuizQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, qq.ctx, "Exist")
	switch _, err := qq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (qq *QuizQuery) ExistX(ctx context.Context) bool {
	exist, err := qq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuizQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qq *QuizQuery) Clone() *QuizQuery {
	if qq == nil {
		return nil
	}
	return &QuizQuery{
		config:          qq.config,
		ctx:             qq.ctx.Clone(),
		order:           append([]quiz.OrderOption{}, qq.order...),
		inters:          append([]Interceptor{}, qq.inters...),
		predicates:      append([]predicate.Quiz{}, qq.predicates...),
		withExam:        qq.withExam.Clone(),
		withSubmissions: qq.withSubmissions.Clone(),
		// clone intermediate query.
		sql:  qq.sql.Clone(),
		path: qq.path,
	}
}

// WithExam tells the query-builder to eager-load the nodes that are connected to
// the "exam" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuizQuery) WithExam(opts ...func(*ExamQuery)) *QuizQuery {
	query := (&ExamClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qq.withExam = query
	return qq
}

// WithSubmissions tells the query-builder to eager-load the nodes that are connected to
// the "submissions" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuizQuery) WithSubmissions(opts ...func(*QuizSubmissionQuery)) *QuizQuery {
	query := (&QuizSubmissionClient{config: qq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	qq.withSubmissions = query
	return qq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Quiz.Query().
//		GroupBy(quiz.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (qq *QuizQuery) GroupBy(field string, fields ...string) *QuizGroupBy {
	qq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &QuizGroupBy{build: qq}
	grbuild.flds = &qq.ctx.Fields
	grbuild.label = quiz.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.Quiz.Query().
//		Select(quiz.FieldTitle).
//		Scan(ctx, &v)
func (qq *QuizQuery) Select(fields ...string) *QuizSelect {
	qq.ctx.Fields = append(qq.ctx.Fields, fields...)
	sbuild := &QuizSelect{QuizQuery: qq}
	sbuild.label = quiz.Label
	sbuild.flds, sbuild.scan = &qq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a QuizSelect configured with the given aggregations.
func (qq *QuizQuery) Aggregate(fns ...AggregateFunc) *QuizSelect {
	return qq.Select().Aggregate(fns...)
}

func (qq *QuizQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range qq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, qq); err != nil {
				return err
			}
		}
	}
	for _, f := range qq.ctx.Fields {
		if !quiz.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qq.path != nil {
		prev, err := qq.path(ctx)
		if err != nil {
			return err
		}
		qq.sql = prev
	}
	return nil
}

func (qq *QuizQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Quiz, error) {
	var (
		nodes       = []*Quiz{}
		_spec       = qq.querySpec()
		loadedTypes = [2]bool{
			qq.withExam != nil,
			qq.withSubmissions != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Quiz).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Quiz{config: qq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(qq.modifiers) > 0 {
		_spec.Modifiers = qq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, qq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := qq.withExam; query != nil {
		if err := qq.loadExam(ctx, query, nodes, nil,
			func(n *Quiz, e *Exam) { n.Edges.Exam = e }); err != nil {
			return nil, err
		}
	}
	if query := qq.withSubmissions; query != nil {
		if err := qq.loadSubmissions(ctx, query, nodes,
			func(n *Quiz) { n.Edges.Submissions = []*QuizSubmission{} },
			func(n *Quiz, e *QuizSubmission) { n.Edges.Submissions = append(n.Edges.Submissions, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (qq *QuizQuery) loadExam(ctx context.Context, query *ExamQuery, nodes []*Quiz, init func(*Quiz), assign func(*Quiz, *Exam)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*Quiz)
	for i := range nodes {
		if nodes[i].ExamId == nil {
			continue
		}
		fk := *nodes[i].ExamId
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(exam.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "examId" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (qq *QuizQuery) loadSubmissions(ctx context.Context, query *QuizSubmissionQuery, nodes []*Quiz, init func(*Quiz), assign func(*Quiz, *QuizSubmission)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*Quiz)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(quizsubmission.FieldQuizId)
	}
	query.Where(predicate.QuizSubmission(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(quiz.SubmissionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.QuizId
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "quizId" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (qq *QuizQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qq.querySpec()
	if len(qq.modifiers) > 0 {
		_spec.Modifiers = qq.modifiers
	}
	_spec.Node.Columns = qq.ctx.Fields
	if len(qq.ctx.Fields) > 0 {
		_spec.Unique = qq.ctx.Unique != nil && *qq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, qq.driver, _spec)
}

func (qq *QuizQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(quiz.Table, quiz.Columns, sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt))
	_spec.From = qq.sql
	if unique := qq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if qq.path != nil {
		_spec.Unique = true
	}
	if fields := qq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quiz.FieldID)
		for i := range fields {
			if fields[i] != quiz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if qq.withExam != nil {
			_spec.Node.AddColumnOnce(quiz.FieldExamId)
		}
	}
	if ps := qq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qq *QuizQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qq.driver.Dialect())
	t1 := builder.Table(quiz.Table)
	columns := qq.ctx.Fields
	if len(columns) == 0 {
		columns = quiz.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qq.sql != nil {
		selector = qq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qq.ctx.Unique != nil && *qq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range qq.modifiers {
		m(selector)
	}
	for _, p := range qq.predicates {
		p(selector)
	}
	for _, p := range qq.order {
		p(selector)
	}
	if offset := qq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ForUpdate locks the selected rows against concurrent updates, and prevent them from being
// updated, deleted or "selected ... for update" by other sessions, until the transaction is
// either committed or rolled-back.
func (qq *QuizQuery) ForUpdate(opts ...sql.LockOption) *QuizQuery {
	if qq.driver.Dialect() == dialect.Postgres {
		qq.Unique(false)
	}
	qq.modifiers = append(qq.modifiers, func(s *sql.Selector) {
		s.ForUpdate(opts...)
	})
	return qq
}

// ForShare behaves similarly to ForUpdate, except that it acquires a shared mode lock
// on any rows that are read. Other sessions can read the rows, but cannot modify them
// until your transaction commits.
func (qq *QuizQuery) ForShare(opts ...sql.LockOption) *QuizQuery {
	if qq.driver.Dialect() == dialect.Postgres {
		qq.Unique(false)
	}
	qq.modifiers = append(qq.modifiers, func(s *sql.Selector) {
		s.ForShare(opts...)
	})
	return qq
}

// QuizGroupBy is the group-by builder for Quiz entities.
type QuizGroupBy struct {
	selector
	build *QuizQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qgb *QuizGroupBy) Aggregate(fns ...AggregateFunc) *QuizGroupBy {
	qgb.fns = append(qgb.fns, fns...)
	return qgb
}

// Scan applies the selector query and scans the result into the given value.
func (qgb *QuizGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qgb.build.ctx, "GroupBy")
	if err := qgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuizQuery, *QuizGroupBy](ctx, qgb.build, qgb, qgb.build.inters, v)
}

func (qgb *QuizGroupBy) sqlScan(ctx context.Context, root *QuizQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(qgb.fns))
	for _, fn := range qgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*qgb.flds)+len(qgb.fns))
		for _, f := range *qgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*qgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// QuizSelect is the builder for selecting fields of Quiz entities.
type QuizSelect struct {
	*QuizQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (qs *QuizSelect) Aggregate(fns ...AggregateFunc) *QuizSelect {
	qs.fns = append(qs.fns, fns...)
	return qs
}

// Scan applies the selector query and scans the result into the given value.
func (qs *QuizSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, qs.ctx, "Select")
	if err := qs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*QuizQuery, *QuizSelect](ctx, qs.QuizQuery, qs, qs.inters, v)
}

func (qs *QuizSelect) sqlScan(ctx context.Context, root *QuizQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(qs.fns))
	for _, fn := range qs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*qs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
