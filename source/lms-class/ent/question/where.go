// Code generated by ent, DO NOT EDIT.

package entquestion

import (
	"lms-class/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldID, id))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContext, v))
}

// ContextId applies equality check predicate on the "contextId" field. It's identical to ContextIdEQ.
func ContextId(v int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContextId, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldPosition, v))
}

// QuestionType applies equality check predicate on the "questionType" field. It's identical to QuestionTypeEQ.
func QuestionType(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionType, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldVersion, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldContext, v))
}

// ContextIdEQ applies the EQ predicate on the "contextId" field.
func ContextIdEQ(v int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldContextId, v))
}

// ContextIdNEQ applies the NEQ predicate on the "contextId" field.
func ContextIdNEQ(v int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldContextId, v))
}

// ContextIdIn applies the In predicate on the "contextId" field.
func ContextIdIn(vs ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldContextId, vs...))
}

// ContextIdNotIn applies the NotIn predicate on the "contextId" field.
func ContextIdNotIn(vs ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldContextId, vs...))
}

// ContextIdGT applies the GT predicate on the "contextId" field.
func ContextIdGT(v int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldContextId, v))
}

// ContextIdGTE applies the GTE predicate on the "contextId" field.
func ContextIdGTE(v int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldContextId, v))
}

// ContextIdLT applies the LT predicate on the "contextId" field.
func ContextIdLT(v int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldContextId, v))
}

// ContextIdLTE applies the LTE predicate on the "contextId" field.
func ContextIdLTE(v int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldContextId, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldPosition, v))
}

// QuestionTypeEQ applies the EQ predicate on the "questionType" field.
func QuestionTypeEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldQuestionType, v))
}

// QuestionTypeNEQ applies the NEQ predicate on the "questionType" field.
func QuestionTypeNEQ(v string) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldQuestionType, v))
}

// QuestionTypeIn applies the In predicate on the "questionType" field.
func QuestionTypeIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldQuestionType, vs...))
}

// QuestionTypeNotIn applies the NotIn predicate on the "questionType" field.
func QuestionTypeNotIn(vs ...string) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldQuestionType, vs...))
}

// QuestionTypeGT applies the GT predicate on the "questionType" field.
func QuestionTypeGT(v string) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldQuestionType, v))
}

// QuestionTypeGTE applies the GTE predicate on the "questionType" field.
func QuestionTypeGTE(v string) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldQuestionType, v))
}

// QuestionTypeLT applies the LT predicate on the "questionType" field.
func QuestionTypeLT(v string) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldQuestionType, v))
}

// QuestionTypeLTE applies the LTE predicate on the "questionType" field.
func QuestionTypeLTE(v string) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldQuestionType, v))
}

// QuestionTypeContains applies the Contains predicate on the "questionType" field.
func QuestionTypeContains(v string) predicate.Question {
	return predicate.Question(sql.FieldContains(FieldQuestionType, v))
}

// QuestionTypeHasPrefix applies the HasPrefix predicate on the "questionType" field.
func QuestionTypeHasPrefix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasPrefix(FieldQuestionType, v))
}

// QuestionTypeHasSuffix applies the HasSuffix predicate on the "questionType" field.
func QuestionTypeHasSuffix(v string) predicate.Question {
	return predicate.Question(sql.FieldHasSuffix(FieldQuestionType, v))
}

// QuestionTypeEqualFold applies the EqualFold predicate on the "questionType" field.
func QuestionTypeEqualFold(v string) predicate.Question {
	return predicate.Question(sql.FieldEqualFold(FieldQuestionType, v))
}

// QuestionTypeContainsFold applies the ContainsFold predicate on the "questionType" field.
func QuestionTypeContainsFold(v string) predicate.Question {
	return predicate.Question(sql.FieldContainsFold(FieldQuestionType, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.Question {
	return predicate.Question(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.Question {
	return predicate.Question(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.Question {
	return predicate.Question(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.Question {
	return predicate.Question(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.Question {
	return predicate.Question(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.Question {
	return predicate.Question(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.Question {
	return predicate.Question(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.Question {
	return predicate.Question(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Question) predicate.Question {
	return predicate.Question(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Question) predicate.Question {
	return predicate.Question(sql.NotPredicates(p))
}
