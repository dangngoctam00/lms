// Code generated by ent, DO NOT EDIT.

package questionhistory

import (
	"lms-class/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/flume/enthistory"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldRef, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldContext, v))
}

// ContextId applies equality check predicate on the "contextId" field. It's identical to ContextIdEQ.
func ContextId(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldContextId, v))
}

// Position applies equality check predicate on the "position" field. It's identical to PositionEQ.
func Position(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldPosition, v))
}

// QuestionType applies equality check predicate on the "questionType" field. It's identical to QuestionTypeEQ.
func QuestionType(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldQuestionType, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldVersion, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v enthistory.OpType) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v enthistory.OpType) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...enthistory.OpType) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...enthistory.OpType) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotNull(FieldRef))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldContainsFold(FieldContext, v))
}

// ContextIdEQ applies the EQ predicate on the "contextId" field.
func ContextIdEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldContextId, v))
}

// ContextIdNEQ applies the NEQ predicate on the "contextId" field.
func ContextIdNEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldContextId, v))
}

// ContextIdIn applies the In predicate on the "contextId" field.
func ContextIdIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldContextId, vs...))
}

// ContextIdNotIn applies the NotIn predicate on the "contextId" field.
func ContextIdNotIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldContextId, vs...))
}

// ContextIdGT applies the GT predicate on the "contextId" field.
func ContextIdGT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldContextId, v))
}

// ContextIdGTE applies the GTE predicate on the "contextId" field.
func ContextIdGTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldContextId, v))
}

// ContextIdLT applies the LT predicate on the "contextId" field.
func ContextIdLT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldContextId, v))
}

// ContextIdLTE applies the LTE predicate on the "contextId" field.
func ContextIdLTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldContextId, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldPosition, vs...))
}

// PositionGT applies the GT predicate on the "position" field.
func PositionGT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldPosition, v))
}

// PositionGTE applies the GTE predicate on the "position" field.
func PositionGTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldPosition, v))
}

// PositionLT applies the LT predicate on the "position" field.
func PositionLT(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldPosition, v))
}

// PositionLTE applies the LTE predicate on the "position" field.
func PositionLTE(v int) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldPosition, v))
}

// QuestionTypeEQ applies the EQ predicate on the "questionType" field.
func QuestionTypeEQ(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldQuestionType, v))
}

// QuestionTypeNEQ applies the NEQ predicate on the "questionType" field.
func QuestionTypeNEQ(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldQuestionType, v))
}

// QuestionTypeIn applies the In predicate on the "questionType" field.
func QuestionTypeIn(vs ...string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldQuestionType, vs...))
}

// QuestionTypeNotIn applies the NotIn predicate on the "questionType" field.
func QuestionTypeNotIn(vs ...string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldQuestionType, vs...))
}

// QuestionTypeGT applies the GT predicate on the "questionType" field.
func QuestionTypeGT(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldQuestionType, v))
}

// QuestionTypeGTE applies the GTE predicate on the "questionType" field.
func QuestionTypeGTE(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldQuestionType, v))
}

// QuestionTypeLT applies the LT predicate on the "questionType" field.
func QuestionTypeLT(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldQuestionType, v))
}

// QuestionTypeLTE applies the LTE predicate on the "questionType" field.
func QuestionTypeLTE(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldQuestionType, v))
}

// QuestionTypeContains applies the Contains predicate on the "questionType" field.
func QuestionTypeContains(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldContains(FieldQuestionType, v))
}

// QuestionTypeHasPrefix applies the HasPrefix predicate on the "questionType" field.
func QuestionTypeHasPrefix(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldHasPrefix(FieldQuestionType, v))
}

// QuestionTypeHasSuffix applies the HasSuffix predicate on the "questionType" field.
func QuestionTypeHasSuffix(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldHasSuffix(FieldQuestionType, v))
}

// QuestionTypeEqualFold applies the EqualFold predicate on the "questionType" field.
func QuestionTypeEqualFold(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEqualFold(FieldQuestionType, v))
}

// QuestionTypeContainsFold applies the ContainsFold predicate on the "questionType" field.
func QuestionTypeContainsFold(v string) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldContainsFold(FieldQuestionType, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int64) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.FieldLTE(FieldVersion, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuestionHistory) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuestionHistory) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuestionHistory) predicate.QuestionHistory {
	return predicate.QuestionHistory(sql.NotPredicates(p))
}
