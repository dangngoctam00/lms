// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"lms-class/ent/migrate"

	"lms-class/ent/exam"
	"lms-class/ent/examhistory"
	"lms-class/ent/question"
	"lms-class/ent/questionhistory"
	"lms-class/ent/quiz"
	"lms-class/ent/quizsubmission"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/flume/enthistory"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Exam is the client for interacting with the Exam builders.
	Exam *ExamClient
	// ExamHistory is the client for interacting with the ExamHistory builders.
	ExamHistory *ExamHistoryClient
	// Question is the client for interacting with the Question builders.
	Question *QuestionClient
	// QuestionHistory is the client for interacting with the QuestionHistory builders.
	QuestionHistory *QuestionHistoryClient
	// Quiz is the client for interacting with the Quiz builders.
	Quiz *QuizClient
	// QuizSubmission is the client for interacting with the QuizSubmission builders.
	QuizSubmission *QuizSubmissionClient
	// historyActivated determines if the history hooks have already been activated
	historyActivated bool
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Exam = NewExamClient(c.config)
	c.ExamHistory = NewExamHistoryClient(c.config)
	c.Question = NewQuestionClient(c.config)
	c.QuestionHistory = NewQuestionHistoryClient(c.config)
	c.Quiz = NewQuizClient(c.config)
	c.QuizSubmission = NewQuizSubmissionClient(c.config)
}

// withHistory adds the history hooks to the appropriate schemas - generated by enthistory
func (c *Client) WithHistory() {
	if !c.historyActivated {
		for _, hook := range enthistory.HistoryHooks[*ExamMutation]() {
			c.Exam.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*QuestionMutation]() {
			c.Question.Use(hook)
		}
		c.historyActivated = true
	}
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Exam:            NewExamClient(cfg),
		ExamHistory:     NewExamHistoryClient(cfg),
		Question:        NewQuestionClient(cfg),
		QuestionHistory: NewQuestionHistoryClient(cfg),
		Quiz:            NewQuizClient(cfg),
		QuizSubmission:  NewQuizSubmissionClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Exam:            NewExamClient(cfg),
		ExamHistory:     NewExamHistoryClient(cfg),
		Question:        NewQuestionClient(cfg),
		QuestionHistory: NewQuestionHistoryClient(cfg),
		Quiz:            NewQuizClient(cfg),
		QuizSubmission:  NewQuizSubmissionClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Exam.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Exam, c.ExamHistory, c.Question, c.QuestionHistory, c.Quiz, c.QuizSubmission,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Exam, c.ExamHistory, c.Question, c.QuestionHistory, c.Quiz, c.QuizSubmission,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ExamMutation:
		return c.Exam.mutate(ctx, m)
	case *ExamHistoryMutation:
		return c.ExamHistory.mutate(ctx, m)
	case *QuestionMutation:
		return c.Question.mutate(ctx, m)
	case *QuestionHistoryMutation:
		return c.QuestionHistory.mutate(ctx, m)
	case *QuizMutation:
		return c.Quiz.mutate(ctx, m)
	case *QuizSubmissionMutation:
		return c.QuizSubmission.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ExamClient is a client for the Exam schema.
type ExamClient struct {
	config
}

// NewExamClient returns a client for the Exam from the given config.
func NewExamClient(c config) *ExamClient {
	return &ExamClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `exam.Hooks(f(g(h())))`.
func (c *ExamClient) Use(hooks ...Hook) {
	c.hooks.Exam = append(c.hooks.Exam, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `exam.Intercept(f(g(h())))`.
func (c *ExamClient) Intercept(interceptors ...Interceptor) {
	c.inters.Exam = append(c.inters.Exam, interceptors...)
}

// Create returns a builder for creating a Exam entity.
func (c *ExamClient) Create() *ExamCreate {
	mutation := newExamMutation(c.config, OpCreate)
	return &ExamCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Exam entities.
func (c *ExamClient) CreateBulk(builders ...*ExamCreate) *ExamCreateBulk {
	return &ExamCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Exam.
func (c *ExamClient) Update() *ExamUpdate {
	mutation := newExamMutation(c.config, OpUpdate)
	return &ExamUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamClient) UpdateOne(e *Exam) *ExamUpdateOne {
	mutation := newExamMutation(c.config, OpUpdateOne, withExam(e))
	return &ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamClient) UpdateOneID(id int) *ExamUpdateOne {
	mutation := newExamMutation(c.config, OpUpdateOne, withExamID(id))
	return &ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Exam.
func (c *ExamClient) Delete() *ExamDelete {
	mutation := newExamMutation(c.config, OpDelete)
	return &ExamDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamClient) DeleteOne(e *Exam) *ExamDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamClient) DeleteOneID(id int) *ExamDeleteOne {
	builder := c.Delete().Where(exam.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamDeleteOne{builder}
}

// Query returns a query builder for Exam.
func (c *ExamClient) Query() *ExamQuery {
	return &ExamQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExam},
		inters: c.Interceptors(),
	}
}

// Get returns a Exam entity by its id.
func (c *ExamClient) Get(ctx context.Context, id int) (*Exam, error) {
	return c.Query().Where(exam.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamClient) GetX(ctx context.Context, id int) *Exam {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuizzes queries the quizzes edge of a Exam.
func (c *ExamClient) QueryQuizzes(e *Exam) *QuizQuery {
	query := (&QuizClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(exam.Table, exam.FieldID, id),
			sqlgraph.To(quiz.Table, quiz.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, exam.QuizzesTable, exam.QuizzesColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExamClient) Hooks() []Hook {
	return c.hooks.Exam
}

// Interceptors returns the client interceptors.
func (c *ExamClient) Interceptors() []Interceptor {
	return c.inters.Exam
}

func (c *ExamClient) mutate(ctx context.Context, m *ExamMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Exam mutation op: %q", m.Op())
	}
}

// ExamHistoryClient is a client for the ExamHistory schema.
type ExamHistoryClient struct {
	config
}

// NewExamHistoryClient returns a client for the ExamHistory from the given config.
func NewExamHistoryClient(c config) *ExamHistoryClient {
	return &ExamHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examhistory.Hooks(f(g(h())))`.
func (c *ExamHistoryClient) Use(hooks ...Hook) {
	c.hooks.ExamHistory = append(c.hooks.ExamHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `examhistory.Intercept(f(g(h())))`.
func (c *ExamHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.ExamHistory = append(c.inters.ExamHistory, interceptors...)
}

// Create returns a builder for creating a ExamHistory entity.
func (c *ExamHistoryClient) Create() *ExamHistoryCreate {
	mutation := newExamHistoryMutation(c.config, OpCreate)
	return &ExamHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ExamHistory entities.
func (c *ExamHistoryClient) CreateBulk(builders ...*ExamHistoryCreate) *ExamHistoryCreateBulk {
	return &ExamHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ExamHistory.
func (c *ExamHistoryClient) Update() *ExamHistoryUpdate {
	mutation := newExamHistoryMutation(c.config, OpUpdate)
	return &ExamHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExamHistoryClient) UpdateOne(eh *ExamHistory) *ExamHistoryUpdateOne {
	mutation := newExamHistoryMutation(c.config, OpUpdateOne, withExamHistory(eh))
	return &ExamHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExamHistoryClient) UpdateOneID(id int) *ExamHistoryUpdateOne {
	mutation := newExamHistoryMutation(c.config, OpUpdateOne, withExamHistoryID(id))
	return &ExamHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ExamHistory.
func (c *ExamHistoryClient) Delete() *ExamHistoryDelete {
	mutation := newExamHistoryMutation(c.config, OpDelete)
	return &ExamHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExamHistoryClient) DeleteOne(eh *ExamHistory) *ExamHistoryDeleteOne {
	return c.DeleteOneID(eh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ExamHistoryClient) DeleteOneID(id int) *ExamHistoryDeleteOne {
	builder := c.Delete().Where(examhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExamHistoryDeleteOne{builder}
}

// Query returns a query builder for ExamHistory.
func (c *ExamHistoryClient) Query() *ExamHistoryQuery {
	return &ExamHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeExamHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a ExamHistory entity by its id.
func (c *ExamHistoryClient) Get(ctx context.Context, id int) (*ExamHistory, error) {
	return c.Query().Where(examhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExamHistoryClient) GetX(ctx context.Context, id int) *ExamHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExamHistoryClient) Hooks() []Hook {
	return c.hooks.ExamHistory
}

// Interceptors returns the client interceptors.
func (c *ExamHistoryClient) Interceptors() []Interceptor {
	return c.inters.ExamHistory
}

func (c *ExamHistoryClient) mutate(ctx context.Context, m *ExamHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ExamHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ExamHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ExamHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ExamHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ExamHistory mutation op: %q", m.Op())
	}
}

// QuestionClient is a client for the Question schema.
type QuestionClient struct {
	config
}

// NewQuestionClient returns a client for the Question from the given config.
func NewQuestionClient(c config) *QuestionClient {
	return &QuestionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `question.Hooks(f(g(h())))`.
func (c *QuestionClient) Use(hooks ...Hook) {
	c.hooks.Question = append(c.hooks.Question, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `question.Intercept(f(g(h())))`.
func (c *QuestionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Question = append(c.inters.Question, interceptors...)
}

// Create returns a builder for creating a Question entity.
func (c *QuestionClient) Create() *QuestionCreate {
	mutation := newQuestionMutation(c.config, OpCreate)
	return &QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Question entities.
func (c *QuestionClient) CreateBulk(builders ...*QuestionCreate) *QuestionCreateBulk {
	return &QuestionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Question.
func (c *QuestionClient) Update() *QuestionUpdate {
	mutation := newQuestionMutation(c.config, OpUpdate)
	return &QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionClient) UpdateOne(q *Question) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestion(q))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionClient) UpdateOneID(id int) *QuestionUpdateOne {
	mutation := newQuestionMutation(c.config, OpUpdateOne, withQuestionID(id))
	return &QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Question.
func (c *QuestionClient) Delete() *QuestionDelete {
	mutation := newQuestionMutation(c.config, OpDelete)
	return &QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionClient) DeleteOne(q *Question) *QuestionDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionClient) DeleteOneID(id int) *QuestionDeleteOne {
	builder := c.Delete().Where(question.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionDeleteOne{builder}
}

// Query returns a query builder for Question.
func (c *QuestionClient) Query() *QuestionQuery {
	return &QuestionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestion},
		inters: c.Interceptors(),
	}
}

// Get returns a Question entity by its id.
func (c *QuestionClient) Get(ctx context.Context, id int) (*Question, error) {
	return c.Query().Where(question.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionClient) GetX(ctx context.Context, id int) *Question {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QuestionClient) Hooks() []Hook {
	return c.hooks.Question
}

// Interceptors returns the client interceptors.
func (c *QuestionClient) Interceptors() []Interceptor {
	return c.inters.Question
}

func (c *QuestionClient) mutate(ctx context.Context, m *QuestionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Question mutation op: %q", m.Op())
	}
}

// QuestionHistoryClient is a client for the QuestionHistory schema.
type QuestionHistoryClient struct {
	config
}

// NewQuestionHistoryClient returns a client for the QuestionHistory from the given config.
func NewQuestionHistoryClient(c config) *QuestionHistoryClient {
	return &QuestionHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `questionhistory.Hooks(f(g(h())))`.
func (c *QuestionHistoryClient) Use(hooks ...Hook) {
	c.hooks.QuestionHistory = append(c.hooks.QuestionHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `questionhistory.Intercept(f(g(h())))`.
func (c *QuestionHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.QuestionHistory = append(c.inters.QuestionHistory, interceptors...)
}

// Create returns a builder for creating a QuestionHistory entity.
func (c *QuestionHistoryClient) Create() *QuestionHistoryCreate {
	mutation := newQuestionHistoryMutation(c.config, OpCreate)
	return &QuestionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuestionHistory entities.
func (c *QuestionHistoryClient) CreateBulk(builders ...*QuestionHistoryCreate) *QuestionHistoryCreateBulk {
	return &QuestionHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuestionHistory.
func (c *QuestionHistoryClient) Update() *QuestionHistoryUpdate {
	mutation := newQuestionHistoryMutation(c.config, OpUpdate)
	return &QuestionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuestionHistoryClient) UpdateOne(qh *QuestionHistory) *QuestionHistoryUpdateOne {
	mutation := newQuestionHistoryMutation(c.config, OpUpdateOne, withQuestionHistory(qh))
	return &QuestionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuestionHistoryClient) UpdateOneID(id int) *QuestionHistoryUpdateOne {
	mutation := newQuestionHistoryMutation(c.config, OpUpdateOne, withQuestionHistoryID(id))
	return &QuestionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuestionHistory.
func (c *QuestionHistoryClient) Delete() *QuestionHistoryDelete {
	mutation := newQuestionHistoryMutation(c.config, OpDelete)
	return &QuestionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuestionHistoryClient) DeleteOne(qh *QuestionHistory) *QuestionHistoryDeleteOne {
	return c.DeleteOneID(qh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuestionHistoryClient) DeleteOneID(id int) *QuestionHistoryDeleteOne {
	builder := c.Delete().Where(questionhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuestionHistoryDeleteOne{builder}
}

// Query returns a query builder for QuestionHistory.
func (c *QuestionHistoryClient) Query() *QuestionHistoryQuery {
	return &QuestionHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuestionHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a QuestionHistory entity by its id.
func (c *QuestionHistoryClient) Get(ctx context.Context, id int) (*QuestionHistory, error) {
	return c.Query().Where(questionhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuestionHistoryClient) GetX(ctx context.Context, id int) *QuestionHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *QuestionHistoryClient) Hooks() []Hook {
	return c.hooks.QuestionHistory
}

// Interceptors returns the client interceptors.
func (c *QuestionHistoryClient) Interceptors() []Interceptor {
	return c.inters.QuestionHistory
}

func (c *QuestionHistoryClient) mutate(ctx context.Context, m *QuestionHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuestionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuestionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuestionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuestionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QuestionHistory mutation op: %q", m.Op())
	}
}

// QuizClient is a client for the Quiz schema.
type QuizClient struct {
	config
}

// NewQuizClient returns a client for the Quiz from the given config.
func NewQuizClient(c config) *QuizClient {
	return &QuizClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quiz.Hooks(f(g(h())))`.
func (c *QuizClient) Use(hooks ...Hook) {
	c.hooks.Quiz = append(c.hooks.Quiz, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `quiz.Intercept(f(g(h())))`.
func (c *QuizClient) Intercept(interceptors ...Interceptor) {
	c.inters.Quiz = append(c.inters.Quiz, interceptors...)
}

// Create returns a builder for creating a Quiz entity.
func (c *QuizClient) Create() *QuizCreate {
	mutation := newQuizMutation(c.config, OpCreate)
	return &QuizCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Quiz entities.
func (c *QuizClient) CreateBulk(builders ...*QuizCreate) *QuizCreateBulk {
	return &QuizCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Quiz.
func (c *QuizClient) Update() *QuizUpdate {
	mutation := newQuizMutation(c.config, OpUpdate)
	return &QuizUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuizClient) UpdateOne(q *Quiz) *QuizUpdateOne {
	mutation := newQuizMutation(c.config, OpUpdateOne, withQuiz(q))
	return &QuizUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuizClient) UpdateOneID(id int) *QuizUpdateOne {
	mutation := newQuizMutation(c.config, OpUpdateOne, withQuizID(id))
	return &QuizUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Quiz.
func (c *QuizClient) Delete() *QuizDelete {
	mutation := newQuizMutation(c.config, OpDelete)
	return &QuizDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuizClient) DeleteOne(q *Quiz) *QuizDeleteOne {
	return c.DeleteOneID(q.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuizClient) DeleteOneID(id int) *QuizDeleteOne {
	builder := c.Delete().Where(quiz.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuizDeleteOne{builder}
}

// Query returns a query builder for Quiz.
func (c *QuizClient) Query() *QuizQuery {
	return &QuizQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuiz},
		inters: c.Interceptors(),
	}
}

// Get returns a Quiz entity by its id.
func (c *QuizClient) Get(ctx context.Context, id int) (*Quiz, error) {
	return c.Query().Where(quiz.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuizClient) GetX(ctx context.Context, id int) *Quiz {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryExam queries the exam edge of a Quiz.
func (c *QuizClient) QueryExam(q *Quiz) *ExamQuery {
	query := (&ExamClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, id),
			sqlgraph.To(exam.Table, exam.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, quiz.ExamTable, quiz.ExamColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubmissions queries the submissions edge of a Quiz.
func (c *QuizClient) QuerySubmissions(q *Quiz) *QuizSubmissionQuery {
	query := (&QuizSubmissionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := q.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, id),
			sqlgraph.To(quizsubmission.Table, quizsubmission.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quiz.SubmissionsTable, quiz.SubmissionsColumn),
		)
		fromV = sqlgraph.Neighbors(q.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuizClient) Hooks() []Hook {
	return c.hooks.Quiz
}

// Interceptors returns the client interceptors.
func (c *QuizClient) Interceptors() []Interceptor {
	return c.inters.Quiz
}

func (c *QuizClient) mutate(ctx context.Context, m *QuizMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuizCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuizUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuizUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuizDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Quiz mutation op: %q", m.Op())
	}
}

// QuizSubmissionClient is a client for the QuizSubmission schema.
type QuizSubmissionClient struct {
	config
}

// NewQuizSubmissionClient returns a client for the QuizSubmission from the given config.
func NewQuizSubmissionClient(c config) *QuizSubmissionClient {
	return &QuizSubmissionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `quizsubmission.Hooks(f(g(h())))`.
func (c *QuizSubmissionClient) Use(hooks ...Hook) {
	c.hooks.QuizSubmission = append(c.hooks.QuizSubmission, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `quizsubmission.Intercept(f(g(h())))`.
func (c *QuizSubmissionClient) Intercept(interceptors ...Interceptor) {
	c.inters.QuizSubmission = append(c.inters.QuizSubmission, interceptors...)
}

// Create returns a builder for creating a QuizSubmission entity.
func (c *QuizSubmissionClient) Create() *QuizSubmissionCreate {
	mutation := newQuizSubmissionMutation(c.config, OpCreate)
	return &QuizSubmissionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of QuizSubmission entities.
func (c *QuizSubmissionClient) CreateBulk(builders ...*QuizSubmissionCreate) *QuizSubmissionCreateBulk {
	return &QuizSubmissionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for QuizSubmission.
func (c *QuizSubmissionClient) Update() *QuizSubmissionUpdate {
	mutation := newQuizSubmissionMutation(c.config, OpUpdate)
	return &QuizSubmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *QuizSubmissionClient) UpdateOne(qs *QuizSubmission) *QuizSubmissionUpdateOne {
	mutation := newQuizSubmissionMutation(c.config, OpUpdateOne, withQuizSubmission(qs))
	return &QuizSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *QuizSubmissionClient) UpdateOneID(id int) *QuizSubmissionUpdateOne {
	mutation := newQuizSubmissionMutation(c.config, OpUpdateOne, withQuizSubmissionID(id))
	return &QuizSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for QuizSubmission.
func (c *QuizSubmissionClient) Delete() *QuizSubmissionDelete {
	mutation := newQuizSubmissionMutation(c.config, OpDelete)
	return &QuizSubmissionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *QuizSubmissionClient) DeleteOne(qs *QuizSubmission) *QuizSubmissionDeleteOne {
	return c.DeleteOneID(qs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *QuizSubmissionClient) DeleteOneID(id int) *QuizSubmissionDeleteOne {
	builder := c.Delete().Where(quizsubmission.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &QuizSubmissionDeleteOne{builder}
}

// Query returns a query builder for QuizSubmission.
func (c *QuizSubmissionClient) Query() *QuizSubmissionQuery {
	return &QuizSubmissionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeQuizSubmission},
		inters: c.Interceptors(),
	}
}

// Get returns a QuizSubmission entity by its id.
func (c *QuizSubmissionClient) Get(ctx context.Context, id int) (*QuizSubmission, error) {
	return c.Query().Where(quizsubmission.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *QuizSubmissionClient) GetX(ctx context.Context, id int) *QuizSubmission {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryQuiz queries the quiz edge of a QuizSubmission.
func (c *QuizSubmissionClient) QueryQuiz(qs *QuizSubmission) *QuizQuery {
	query := (&QuizClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := qs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(quizsubmission.Table, quizsubmission.FieldID, id),
			sqlgraph.To(quiz.Table, quiz.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, quizsubmission.QuizTable, quizsubmission.QuizColumn),
		)
		fromV = sqlgraph.Neighbors(qs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *QuizSubmissionClient) Hooks() []Hook {
	return c.hooks.QuizSubmission
}

// Interceptors returns the client interceptors.
func (c *QuizSubmissionClient) Interceptors() []Interceptor {
	return c.inters.QuizSubmission
}

func (c *QuizSubmissionClient) mutate(ctx context.Context, m *QuizSubmissionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&QuizSubmissionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&QuizSubmissionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&QuizSubmissionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&QuizSubmissionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown QuizSubmission mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Exam, ExamHistory, Question, QuestionHistory, Quiz, QuizSubmission []ent.Hook
	}
	inters struct {
		Exam, ExamHistory, Question, QuestionHistory, Quiz,
		QuizSubmission []ent.Interceptor
	}
)
