// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-class/ent/exam"
	"lms-class/ent/predicate"
	"lms-class/ent/quiz"
	"lms-class/ent/quizsubmission"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuizUpdate is the builder for updating Quiz entities.
type QuizUpdate struct {
	config
	hooks    []Hook
	mutation *QuizMutation
}

// Where appends a list predicates to the QuizUpdate builder.
func (qu *QuizUpdate) Where(ps ...predicate.Quiz) *QuizUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetTitle sets the "title" field.
func (qu *QuizUpdate) SetTitle(s string) *QuizUpdate {
	qu.mutation.SetTitle(s)
	return qu
}

// SetDescription sets the "description" field.
func (qu *QuizUpdate) SetDescription(s string) *QuizUpdate {
	qu.mutation.SetDescription(s)
	return qu
}

// SetGradeTag sets the "gradeTag" field.
func (qu *QuizUpdate) SetGradeTag(s string) *QuizUpdate {
	qu.mutation.SetGradeTag(s)
	return qu
}

// SetExamId sets the "examId" field.
func (qu *QuizUpdate) SetExamId(i int) *QuizUpdate {
	qu.mutation.SetExamId(i)
	return qu
}

// SetNillableExamId sets the "examId" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableExamId(i *int) *QuizUpdate {
	if i != nil {
		qu.SetExamId(*i)
	}
	return qu
}

// ClearExamId clears the value of the "examId" field.
func (qu *QuizUpdate) ClearExamId() *QuizUpdate {
	qu.mutation.ClearExamId()
	return qu
}

// SetIsPublished sets the "isPublished" field.
func (qu *QuizUpdate) SetIsPublished(b bool) *QuizUpdate {
	qu.mutation.SetIsPublished(b)
	return qu
}

// SetCreatedAt sets the "createdAt" field.
func (qu *QuizUpdate) SetCreatedAt(t time.Time) *QuizUpdate {
	qu.mutation.SetCreatedAt(t)
	return qu
}

// SetUpdatedAt sets the "updatedAt" field.
func (qu *QuizUpdate) SetUpdatedAt(t time.Time) *QuizUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetContext sets the "context" field.
func (qu *QuizUpdate) SetContext(s string) *QuizUpdate {
	qu.mutation.SetContext(s)
	return qu
}

// SetContextId sets the "contextId" field.
func (qu *QuizUpdate) SetContextId(i int) *QuizUpdate {
	qu.mutation.ResetContextId()
	qu.mutation.SetContextId(i)
	return qu
}

// AddContextId adds i to the "contextId" field.
func (qu *QuizUpdate) AddContextId(i int) *QuizUpdate {
	qu.mutation.AddContextId(i)
	return qu
}

// SetParentId sets the "parentId" field.
func (qu *QuizUpdate) SetParentId(i int) *QuizUpdate {
	qu.mutation.ResetParentId()
	qu.mutation.SetParentId(i)
	return qu
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableParentId(i *int) *QuizUpdate {
	if i != nil {
		qu.SetParentId(*i)
	}
	return qu
}

// AddParentId adds i to the "parentId" field.
func (qu *QuizUpdate) AddParentId(i int) *QuizUpdate {
	qu.mutation.AddParentId(i)
	return qu
}

// ClearParentId clears the value of the "parentId" field.
func (qu *QuizUpdate) ClearParentId() *QuizUpdate {
	qu.mutation.ClearParentId()
	return qu
}

// SetStartedAt sets the "startedAt" field.
func (qu *QuizUpdate) SetStartedAt(t time.Time) *QuizUpdate {
	qu.mutation.SetStartedAt(t)
	return qu
}

// SetNillableStartedAt sets the "startedAt" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableStartedAt(t *time.Time) *QuizUpdate {
	if t != nil {
		qu.SetStartedAt(*t)
	}
	return qu
}

// ClearStartedAt clears the value of the "startedAt" field.
func (qu *QuizUpdate) ClearStartedAt() *QuizUpdate {
	qu.mutation.ClearStartedAt()
	return qu
}

// SetFinishedAt sets the "finishedAt" field.
func (qu *QuizUpdate) SetFinishedAt(t time.Time) *QuizUpdate {
	qu.mutation.SetFinishedAt(t)
	return qu
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableFinishedAt(t *time.Time) *QuizUpdate {
	if t != nil {
		qu.SetFinishedAt(*t)
	}
	return qu
}

// ClearFinishedAt clears the value of the "finishedAt" field.
func (qu *QuizUpdate) ClearFinishedAt() *QuizUpdate {
	qu.mutation.ClearFinishedAt()
	return qu
}

// SetTimeLimit sets the "timeLimit" field.
func (qu *QuizUpdate) SetTimeLimit(i int) *QuizUpdate {
	qu.mutation.ResetTimeLimit()
	qu.mutation.SetTimeLimit(i)
	return qu
}

// SetNillableTimeLimit sets the "timeLimit" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableTimeLimit(i *int) *QuizUpdate {
	if i != nil {
		qu.SetTimeLimit(*i)
	}
	return qu
}

// AddTimeLimit adds i to the "timeLimit" field.
func (qu *QuizUpdate) AddTimeLimit(i int) *QuizUpdate {
	qu.mutation.AddTimeLimit(i)
	return qu
}

// ClearTimeLimit clears the value of the "timeLimit" field.
func (qu *QuizUpdate) ClearTimeLimit() *QuizUpdate {
	qu.mutation.ClearTimeLimit()
	return qu
}

// SetMaxAttempt sets the "maxAttempt" field.
func (qu *QuizUpdate) SetMaxAttempt(i int) *QuizUpdate {
	qu.mutation.ResetMaxAttempt()
	qu.mutation.SetMaxAttempt(i)
	return qu
}

// SetNillableMaxAttempt sets the "maxAttempt" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableMaxAttempt(i *int) *QuizUpdate {
	if i != nil {
		qu.SetMaxAttempt(*i)
	}
	return qu
}

// AddMaxAttempt adds i to the "maxAttempt" field.
func (qu *QuizUpdate) AddMaxAttempt(i int) *QuizUpdate {
	qu.mutation.AddMaxAttempt(i)
	return qu
}

// ClearMaxAttempt clears the value of the "maxAttempt" field.
func (qu *QuizUpdate) ClearMaxAttempt() *QuizUpdate {
	qu.mutation.ClearMaxAttempt()
	return qu
}

// SetViewPreviousSessions sets the "viewPreviousSessions" field.
func (qu *QuizUpdate) SetViewPreviousSessions(b bool) *QuizUpdate {
	qu.mutation.SetViewPreviousSessions(b)
	return qu
}

// SetViewPreviousSessionsTime sets the "viewPreviousSessionsTime" field.
func (qu *QuizUpdate) SetViewPreviousSessionsTime(t time.Time) *QuizUpdate {
	qu.mutation.SetViewPreviousSessionsTime(t)
	return qu
}

// SetNillableViewPreviousSessionsTime sets the "viewPreviousSessionsTime" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableViewPreviousSessionsTime(t *time.Time) *QuizUpdate {
	if t != nil {
		qu.SetViewPreviousSessionsTime(*t)
	}
	return qu
}

// ClearViewPreviousSessionsTime clears the value of the "viewPreviousSessionsTime" field.
func (qu *QuizUpdate) ClearViewPreviousSessionsTime() *QuizUpdate {
	qu.mutation.ClearViewPreviousSessionsTime()
	return qu
}

// SetViewResult sets the "viewResult" field.
func (qu *QuizUpdate) SetViewResult(b bool) *QuizUpdate {
	qu.mutation.SetViewResult(b)
	return qu
}

// SetPassedScore sets the "passedScore" field.
func (qu *QuizUpdate) SetPassedScore(i int) *QuizUpdate {
	qu.mutation.ResetPassedScore()
	qu.mutation.SetPassedScore(i)
	return qu
}

// SetNillablePassedScore sets the "passedScore" field if the given value is not nil.
func (qu *QuizUpdate) SetNillablePassedScore(i *int) *QuizUpdate {
	if i != nil {
		qu.SetPassedScore(*i)
	}
	return qu
}

// AddPassedScore adds i to the "passedScore" field.
func (qu *QuizUpdate) AddPassedScore(i int) *QuizUpdate {
	qu.mutation.AddPassedScore(i)
	return qu
}

// ClearPassedScore clears the value of the "passedScore" field.
func (qu *QuizUpdate) ClearPassedScore() *QuizUpdate {
	qu.mutation.ClearPassedScore()
	return qu
}

// SetFinalGradedStrategy sets the "finalGradedStrategy" field.
func (qu *QuizUpdate) SetFinalGradedStrategy(s string) *QuizUpdate {
	qu.mutation.SetFinalGradedStrategy(s)
	return qu
}

// SetNillableFinalGradedStrategy sets the "finalGradedStrategy" field if the given value is not nil.
func (qu *QuizUpdate) SetNillableFinalGradedStrategy(s *string) *QuizUpdate {
	if s != nil {
		qu.SetFinalGradedStrategy(*s)
	}
	return qu
}

// ClearFinalGradedStrategy clears the value of the "finalGradedStrategy" field.
func (qu *QuizUpdate) ClearFinalGradedStrategy() *QuizUpdate {
	qu.mutation.ClearFinalGradedStrategy()
	return qu
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (qu *QuizUpdate) SetExamID(id int) *QuizUpdate {
	qu.mutation.SetExamID(id)
	return qu
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (qu *QuizUpdate) SetNillableExamID(id *int) *QuizUpdate {
	if id != nil {
		qu = qu.SetExamID(*id)
	}
	return qu
}

// SetExam sets the "exam" edge to the Exam entity.
func (qu *QuizUpdate) SetExam(e *Exam) *QuizUpdate {
	return qu.SetExamID(e.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the QuizSubmission entity by IDs.
func (qu *QuizUpdate) AddSubmissionIDs(ids ...int) *QuizUpdate {
	qu.mutation.AddSubmissionIDs(ids...)
	return qu
}

// AddSubmissions adds the "submissions" edges to the QuizSubmission entity.
func (qu *QuizUpdate) AddSubmissions(q ...*QuizSubmission) *QuizUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddSubmissionIDs(ids...)
}

// Mutation returns the QuizMutation object of the builder.
func (qu *QuizUpdate) Mutation() *QuizMutation {
	return qu.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (qu *QuizUpdate) ClearExam() *QuizUpdate {
	qu.mutation.ClearExam()
	return qu
}

// ClearSubmissions clears all "submissions" edges to the QuizSubmission entity.
func (qu *QuizUpdate) ClearSubmissions() *QuizUpdate {
	qu.mutation.ClearSubmissions()
	return qu
}

// RemoveSubmissionIDs removes the "submissions" edge to QuizSubmission entities by IDs.
func (qu *QuizUpdate) RemoveSubmissionIDs(ids ...int) *QuizUpdate {
	qu.mutation.RemoveSubmissionIDs(ids...)
	return qu
}

// RemoveSubmissions removes "submissions" edges to QuizSubmission entities.
func (qu *QuizUpdate) RemoveSubmissions(q ...*QuizSubmission) *QuizUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveSubmissionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuizUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuizUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuizUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuizUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuizUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(quiz.Table, quiz.Columns, sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Title(); ok {
		_spec.SetField(quiz.FieldTitle, field.TypeString, value)
	}
	if value, ok := qu.mutation.Description(); ok {
		_spec.SetField(quiz.FieldDescription, field.TypeString, value)
	}
	if value, ok := qu.mutation.GradeTag(); ok {
		_spec.SetField(quiz.FieldGradeTag, field.TypeString, value)
	}
	if value, ok := qu.mutation.IsPublished(); ok {
		_spec.SetField(quiz.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := qu.mutation.CreatedAt(); ok {
		_spec.SetField(quiz.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(quiz.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.Context(); ok {
		_spec.SetField(quiz.FieldContext, field.TypeString, value)
	}
	if value, ok := qu.mutation.ContextId(); ok {
		_spec.SetField(quiz.FieldContextId, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedContextId(); ok {
		_spec.AddField(quiz.FieldContextId, field.TypeInt, value)
	}
	if value, ok := qu.mutation.ParentId(); ok {
		_spec.SetField(quiz.FieldParentId, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedParentId(); ok {
		_spec.AddField(quiz.FieldParentId, field.TypeInt, value)
	}
	if qu.mutation.ParentIdCleared() {
		_spec.ClearField(quiz.FieldParentId, field.TypeInt)
	}
	if value, ok := qu.mutation.StartedAt(); ok {
		_spec.SetField(quiz.FieldStartedAt, field.TypeTime, value)
	}
	if qu.mutation.StartedAtCleared() {
		_spec.ClearField(quiz.FieldStartedAt, field.TypeTime)
	}
	if value, ok := qu.mutation.FinishedAt(); ok {
		_spec.SetField(quiz.FieldFinishedAt, field.TypeTime, value)
	}
	if qu.mutation.FinishedAtCleared() {
		_spec.ClearField(quiz.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := qu.mutation.TimeLimit(); ok {
		_spec.SetField(quiz.FieldTimeLimit, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedTimeLimit(); ok {
		_spec.AddField(quiz.FieldTimeLimit, field.TypeInt, value)
	}
	if qu.mutation.TimeLimitCleared() {
		_spec.ClearField(quiz.FieldTimeLimit, field.TypeInt)
	}
	if value, ok := qu.mutation.MaxAttempt(); ok {
		_spec.SetField(quiz.FieldMaxAttempt, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedMaxAttempt(); ok {
		_spec.AddField(quiz.FieldMaxAttempt, field.TypeInt, value)
	}
	if qu.mutation.MaxAttemptCleared() {
		_spec.ClearField(quiz.FieldMaxAttempt, field.TypeInt)
	}
	if value, ok := qu.mutation.ViewPreviousSessions(); ok {
		_spec.SetField(quiz.FieldViewPreviousSessions, field.TypeBool, value)
	}
	if value, ok := qu.mutation.ViewPreviousSessionsTime(); ok {
		_spec.SetField(quiz.FieldViewPreviousSessionsTime, field.TypeTime, value)
	}
	if qu.mutation.ViewPreviousSessionsTimeCleared() {
		_spec.ClearField(quiz.FieldViewPreviousSessionsTime, field.TypeTime)
	}
	if value, ok := qu.mutation.ViewResult(); ok {
		_spec.SetField(quiz.FieldViewResult, field.TypeBool, value)
	}
	if value, ok := qu.mutation.PassedScore(); ok {
		_spec.SetField(quiz.FieldPassedScore, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedPassedScore(); ok {
		_spec.AddField(quiz.FieldPassedScore, field.TypeInt, value)
	}
	if qu.mutation.PassedScoreCleared() {
		_spec.ClearField(quiz.FieldPassedScore, field.TypeInt)
	}
	if value, ok := qu.mutation.FinalGradedStrategy(); ok {
		_spec.SetField(quiz.FieldFinalGradedStrategy, field.TypeString, value)
	}
	if qu.mutation.FinalGradedStrategyCleared() {
		_spec.ClearField(quiz.FieldFinalGradedStrategy, field.TypeString)
	}
	if qu.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quiz.ExamTable,
			Columns: []string{quiz.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quiz.ExamTable,
			Columns: []string{quiz.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.SubmissionsTable,
			Columns: []string{quiz.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !qu.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.SubmissionsTable,
			Columns: []string{quiz.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.SubmissionsTable,
			Columns: []string{quiz.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quiz.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuizUpdateOne is the builder for updating a single Quiz entity.
type QuizUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuizMutation
}

// SetTitle sets the "title" field.
func (quo *QuizUpdateOne) SetTitle(s string) *QuizUpdateOne {
	quo.mutation.SetTitle(s)
	return quo
}

// SetDescription sets the "description" field.
func (quo *QuizUpdateOne) SetDescription(s string) *QuizUpdateOne {
	quo.mutation.SetDescription(s)
	return quo
}

// SetGradeTag sets the "gradeTag" field.
func (quo *QuizUpdateOne) SetGradeTag(s string) *QuizUpdateOne {
	quo.mutation.SetGradeTag(s)
	return quo
}

// SetExamId sets the "examId" field.
func (quo *QuizUpdateOne) SetExamId(i int) *QuizUpdateOne {
	quo.mutation.SetExamId(i)
	return quo
}

// SetNillableExamId sets the "examId" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableExamId(i *int) *QuizUpdateOne {
	if i != nil {
		quo.SetExamId(*i)
	}
	return quo
}

// ClearExamId clears the value of the "examId" field.
func (quo *QuizUpdateOne) ClearExamId() *QuizUpdateOne {
	quo.mutation.ClearExamId()
	return quo
}

// SetIsPublished sets the "isPublished" field.
func (quo *QuizUpdateOne) SetIsPublished(b bool) *QuizUpdateOne {
	quo.mutation.SetIsPublished(b)
	return quo
}

// SetCreatedAt sets the "createdAt" field.
func (quo *QuizUpdateOne) SetCreatedAt(t time.Time) *QuizUpdateOne {
	quo.mutation.SetCreatedAt(t)
	return quo
}

// SetUpdatedAt sets the "updatedAt" field.
func (quo *QuizUpdateOne) SetUpdatedAt(t time.Time) *QuizUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetContext sets the "context" field.
func (quo *QuizUpdateOne) SetContext(s string) *QuizUpdateOne {
	quo.mutation.SetContext(s)
	return quo
}

// SetContextId sets the "contextId" field.
func (quo *QuizUpdateOne) SetContextId(i int) *QuizUpdateOne {
	quo.mutation.ResetContextId()
	quo.mutation.SetContextId(i)
	return quo
}

// AddContextId adds i to the "contextId" field.
func (quo *QuizUpdateOne) AddContextId(i int) *QuizUpdateOne {
	quo.mutation.AddContextId(i)
	return quo
}

// SetParentId sets the "parentId" field.
func (quo *QuizUpdateOne) SetParentId(i int) *QuizUpdateOne {
	quo.mutation.ResetParentId()
	quo.mutation.SetParentId(i)
	return quo
}

// SetNillableParentId sets the "parentId" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableParentId(i *int) *QuizUpdateOne {
	if i != nil {
		quo.SetParentId(*i)
	}
	return quo
}

// AddParentId adds i to the "parentId" field.
func (quo *QuizUpdateOne) AddParentId(i int) *QuizUpdateOne {
	quo.mutation.AddParentId(i)
	return quo
}

// ClearParentId clears the value of the "parentId" field.
func (quo *QuizUpdateOne) ClearParentId() *QuizUpdateOne {
	quo.mutation.ClearParentId()
	return quo
}

// SetStartedAt sets the "startedAt" field.
func (quo *QuizUpdateOne) SetStartedAt(t time.Time) *QuizUpdateOne {
	quo.mutation.SetStartedAt(t)
	return quo
}

// SetNillableStartedAt sets the "startedAt" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableStartedAt(t *time.Time) *QuizUpdateOne {
	if t != nil {
		quo.SetStartedAt(*t)
	}
	return quo
}

// ClearStartedAt clears the value of the "startedAt" field.
func (quo *QuizUpdateOne) ClearStartedAt() *QuizUpdateOne {
	quo.mutation.ClearStartedAt()
	return quo
}

// SetFinishedAt sets the "finishedAt" field.
func (quo *QuizUpdateOne) SetFinishedAt(t time.Time) *QuizUpdateOne {
	quo.mutation.SetFinishedAt(t)
	return quo
}

// SetNillableFinishedAt sets the "finishedAt" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableFinishedAt(t *time.Time) *QuizUpdateOne {
	if t != nil {
		quo.SetFinishedAt(*t)
	}
	return quo
}

// ClearFinishedAt clears the value of the "finishedAt" field.
func (quo *QuizUpdateOne) ClearFinishedAt() *QuizUpdateOne {
	quo.mutation.ClearFinishedAt()
	return quo
}

// SetTimeLimit sets the "timeLimit" field.
func (quo *QuizUpdateOne) SetTimeLimit(i int) *QuizUpdateOne {
	quo.mutation.ResetTimeLimit()
	quo.mutation.SetTimeLimit(i)
	return quo
}

// SetNillableTimeLimit sets the "timeLimit" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableTimeLimit(i *int) *QuizUpdateOne {
	if i != nil {
		quo.SetTimeLimit(*i)
	}
	return quo
}

// AddTimeLimit adds i to the "timeLimit" field.
func (quo *QuizUpdateOne) AddTimeLimit(i int) *QuizUpdateOne {
	quo.mutation.AddTimeLimit(i)
	return quo
}

// ClearTimeLimit clears the value of the "timeLimit" field.
func (quo *QuizUpdateOne) ClearTimeLimit() *QuizUpdateOne {
	quo.mutation.ClearTimeLimit()
	return quo
}

// SetMaxAttempt sets the "maxAttempt" field.
func (quo *QuizUpdateOne) SetMaxAttempt(i int) *QuizUpdateOne {
	quo.mutation.ResetMaxAttempt()
	quo.mutation.SetMaxAttempt(i)
	return quo
}

// SetNillableMaxAttempt sets the "maxAttempt" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableMaxAttempt(i *int) *QuizUpdateOne {
	if i != nil {
		quo.SetMaxAttempt(*i)
	}
	return quo
}

// AddMaxAttempt adds i to the "maxAttempt" field.
func (quo *QuizUpdateOne) AddMaxAttempt(i int) *QuizUpdateOne {
	quo.mutation.AddMaxAttempt(i)
	return quo
}

// ClearMaxAttempt clears the value of the "maxAttempt" field.
func (quo *QuizUpdateOne) ClearMaxAttempt() *QuizUpdateOne {
	quo.mutation.ClearMaxAttempt()
	return quo
}

// SetViewPreviousSessions sets the "viewPreviousSessions" field.
func (quo *QuizUpdateOne) SetViewPreviousSessions(b bool) *QuizUpdateOne {
	quo.mutation.SetViewPreviousSessions(b)
	return quo
}

// SetViewPreviousSessionsTime sets the "viewPreviousSessionsTime" field.
func (quo *QuizUpdateOne) SetViewPreviousSessionsTime(t time.Time) *QuizUpdateOne {
	quo.mutation.SetViewPreviousSessionsTime(t)
	return quo
}

// SetNillableViewPreviousSessionsTime sets the "viewPreviousSessionsTime" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableViewPreviousSessionsTime(t *time.Time) *QuizUpdateOne {
	if t != nil {
		quo.SetViewPreviousSessionsTime(*t)
	}
	return quo
}

// ClearViewPreviousSessionsTime clears the value of the "viewPreviousSessionsTime" field.
func (quo *QuizUpdateOne) ClearViewPreviousSessionsTime() *QuizUpdateOne {
	quo.mutation.ClearViewPreviousSessionsTime()
	return quo
}

// SetViewResult sets the "viewResult" field.
func (quo *QuizUpdateOne) SetViewResult(b bool) *QuizUpdateOne {
	quo.mutation.SetViewResult(b)
	return quo
}

// SetPassedScore sets the "passedScore" field.
func (quo *QuizUpdateOne) SetPassedScore(i int) *QuizUpdateOne {
	quo.mutation.ResetPassedScore()
	quo.mutation.SetPassedScore(i)
	return quo
}

// SetNillablePassedScore sets the "passedScore" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillablePassedScore(i *int) *QuizUpdateOne {
	if i != nil {
		quo.SetPassedScore(*i)
	}
	return quo
}

// AddPassedScore adds i to the "passedScore" field.
func (quo *QuizUpdateOne) AddPassedScore(i int) *QuizUpdateOne {
	quo.mutation.AddPassedScore(i)
	return quo
}

// ClearPassedScore clears the value of the "passedScore" field.
func (quo *QuizUpdateOne) ClearPassedScore() *QuizUpdateOne {
	quo.mutation.ClearPassedScore()
	return quo
}

// SetFinalGradedStrategy sets the "finalGradedStrategy" field.
func (quo *QuizUpdateOne) SetFinalGradedStrategy(s string) *QuizUpdateOne {
	quo.mutation.SetFinalGradedStrategy(s)
	return quo
}

// SetNillableFinalGradedStrategy sets the "finalGradedStrategy" field if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableFinalGradedStrategy(s *string) *QuizUpdateOne {
	if s != nil {
		quo.SetFinalGradedStrategy(*s)
	}
	return quo
}

// ClearFinalGradedStrategy clears the value of the "finalGradedStrategy" field.
func (quo *QuizUpdateOne) ClearFinalGradedStrategy() *QuizUpdateOne {
	quo.mutation.ClearFinalGradedStrategy()
	return quo
}

// SetExamID sets the "exam" edge to the Exam entity by ID.
func (quo *QuizUpdateOne) SetExamID(id int) *QuizUpdateOne {
	quo.mutation.SetExamID(id)
	return quo
}

// SetNillableExamID sets the "exam" edge to the Exam entity by ID if the given value is not nil.
func (quo *QuizUpdateOne) SetNillableExamID(id *int) *QuizUpdateOne {
	if id != nil {
		quo = quo.SetExamID(*id)
	}
	return quo
}

// SetExam sets the "exam" edge to the Exam entity.
func (quo *QuizUpdateOne) SetExam(e *Exam) *QuizUpdateOne {
	return quo.SetExamID(e.ID)
}

// AddSubmissionIDs adds the "submissions" edge to the QuizSubmission entity by IDs.
func (quo *QuizUpdateOne) AddSubmissionIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.AddSubmissionIDs(ids...)
	return quo
}

// AddSubmissions adds the "submissions" edges to the QuizSubmission entity.
func (quo *QuizUpdateOne) AddSubmissions(q ...*QuizSubmission) *QuizUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddSubmissionIDs(ids...)
}

// Mutation returns the QuizMutation object of the builder.
func (quo *QuizUpdateOne) Mutation() *QuizMutation {
	return quo.mutation
}

// ClearExam clears the "exam" edge to the Exam entity.
func (quo *QuizUpdateOne) ClearExam() *QuizUpdateOne {
	quo.mutation.ClearExam()
	return quo
}

// ClearSubmissions clears all "submissions" edges to the QuizSubmission entity.
func (quo *QuizUpdateOne) ClearSubmissions() *QuizUpdateOne {
	quo.mutation.ClearSubmissions()
	return quo
}

// RemoveSubmissionIDs removes the "submissions" edge to QuizSubmission entities by IDs.
func (quo *QuizUpdateOne) RemoveSubmissionIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.RemoveSubmissionIDs(ids...)
	return quo
}

// RemoveSubmissions removes "submissions" edges to QuizSubmission entities.
func (quo *QuizUpdateOne) RemoveSubmissions(q ...*QuizSubmission) *QuizUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveSubmissionIDs(ids...)
}

// Where appends a list predicates to the QuizUpdate builder.
func (quo *QuizUpdateOne) Where(ps ...predicate.Quiz) *QuizUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuizUpdateOne) Select(field string, fields ...string) *QuizUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Quiz entity.
func (quo *QuizUpdateOne) Save(ctx context.Context) (*Quiz, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuizUpdateOne) SaveX(ctx context.Context) *Quiz {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuizUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuizUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuizUpdateOne) sqlSave(ctx context.Context) (_node *Quiz, err error) {
	_spec := sqlgraph.NewUpdateSpec(quiz.Table, quiz.Columns, sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Quiz.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quiz.FieldID)
		for _, f := range fields {
			if !quiz.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quiz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Title(); ok {
		_spec.SetField(quiz.FieldTitle, field.TypeString, value)
	}
	if value, ok := quo.mutation.Description(); ok {
		_spec.SetField(quiz.FieldDescription, field.TypeString, value)
	}
	if value, ok := quo.mutation.GradeTag(); ok {
		_spec.SetField(quiz.FieldGradeTag, field.TypeString, value)
	}
	if value, ok := quo.mutation.IsPublished(); ok {
		_spec.SetField(quiz.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := quo.mutation.CreatedAt(); ok {
		_spec.SetField(quiz.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(quiz.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.Context(); ok {
		_spec.SetField(quiz.FieldContext, field.TypeString, value)
	}
	if value, ok := quo.mutation.ContextId(); ok {
		_spec.SetField(quiz.FieldContextId, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedContextId(); ok {
		_spec.AddField(quiz.FieldContextId, field.TypeInt, value)
	}
	if value, ok := quo.mutation.ParentId(); ok {
		_spec.SetField(quiz.FieldParentId, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedParentId(); ok {
		_spec.AddField(quiz.FieldParentId, field.TypeInt, value)
	}
	if quo.mutation.ParentIdCleared() {
		_spec.ClearField(quiz.FieldParentId, field.TypeInt)
	}
	if value, ok := quo.mutation.StartedAt(); ok {
		_spec.SetField(quiz.FieldStartedAt, field.TypeTime, value)
	}
	if quo.mutation.StartedAtCleared() {
		_spec.ClearField(quiz.FieldStartedAt, field.TypeTime)
	}
	if value, ok := quo.mutation.FinishedAt(); ok {
		_spec.SetField(quiz.FieldFinishedAt, field.TypeTime, value)
	}
	if quo.mutation.FinishedAtCleared() {
		_spec.ClearField(quiz.FieldFinishedAt, field.TypeTime)
	}
	if value, ok := quo.mutation.TimeLimit(); ok {
		_spec.SetField(quiz.FieldTimeLimit, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedTimeLimit(); ok {
		_spec.AddField(quiz.FieldTimeLimit, field.TypeInt, value)
	}
	if quo.mutation.TimeLimitCleared() {
		_spec.ClearField(quiz.FieldTimeLimit, field.TypeInt)
	}
	if value, ok := quo.mutation.MaxAttempt(); ok {
		_spec.SetField(quiz.FieldMaxAttempt, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedMaxAttempt(); ok {
		_spec.AddField(quiz.FieldMaxAttempt, field.TypeInt, value)
	}
	if quo.mutation.MaxAttemptCleared() {
		_spec.ClearField(quiz.FieldMaxAttempt, field.TypeInt)
	}
	if value, ok := quo.mutation.ViewPreviousSessions(); ok {
		_spec.SetField(quiz.FieldViewPreviousSessions, field.TypeBool, value)
	}
	if value, ok := quo.mutation.ViewPreviousSessionsTime(); ok {
		_spec.SetField(quiz.FieldViewPreviousSessionsTime, field.TypeTime, value)
	}
	if quo.mutation.ViewPreviousSessionsTimeCleared() {
		_spec.ClearField(quiz.FieldViewPreviousSessionsTime, field.TypeTime)
	}
	if value, ok := quo.mutation.ViewResult(); ok {
		_spec.SetField(quiz.FieldViewResult, field.TypeBool, value)
	}
	if value, ok := quo.mutation.PassedScore(); ok {
		_spec.SetField(quiz.FieldPassedScore, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedPassedScore(); ok {
		_spec.AddField(quiz.FieldPassedScore, field.TypeInt, value)
	}
	if quo.mutation.PassedScoreCleared() {
		_spec.ClearField(quiz.FieldPassedScore, field.TypeInt)
	}
	if value, ok := quo.mutation.FinalGradedStrategy(); ok {
		_spec.SetField(quiz.FieldFinalGradedStrategy, field.TypeString, value)
	}
	if quo.mutation.FinalGradedStrategyCleared() {
		_spec.ClearField(quiz.FieldFinalGradedStrategy, field.TypeString)
	}
	if quo.mutation.ExamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quiz.ExamTable,
			Columns: []string{quiz.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.ExamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quiz.ExamTable,
			Columns: []string{quiz.ExamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(exam.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.SubmissionsTable,
			Columns: []string{quiz.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedSubmissionsIDs(); len(nodes) > 0 && !quo.mutation.SubmissionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.SubmissionsTable,
			Columns: []string{quiz.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.SubmissionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.SubmissionsTable,
			Columns: []string{quiz.SubmissionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Quiz{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quiz.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
