// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lms-class/ent/examhistory"
	"lms-class/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExamHistoryUpdate is the builder for updating ExamHistory entities.
type ExamHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *ExamHistoryMutation
}

// Where appends a list predicates to the ExamHistoryUpdate builder.
func (ehu *ExamHistoryUpdate) Where(ps ...predicate.ExamHistory) *ExamHistoryUpdate {
	ehu.mutation.Where(ps...)
	return ehu
}

// SetTitle sets the "title" field.
func (ehu *ExamHistoryUpdate) SetTitle(s string) *ExamHistoryUpdate {
	ehu.mutation.SetTitle(s)
	return ehu
}

// SetContext sets the "context" field.
func (ehu *ExamHistoryUpdate) SetContext(s string) *ExamHistoryUpdate {
	ehu.mutation.SetContext(s)
	return ehu
}

// SetContextId sets the "contextId" field.
func (ehu *ExamHistoryUpdate) SetContextId(s string) *ExamHistoryUpdate {
	ehu.mutation.SetContextId(s)
	return ehu
}

// SetIsPublished sets the "isPublished" field.
func (ehu *ExamHistoryUpdate) SetIsPublished(b bool) *ExamHistoryUpdate {
	ehu.mutation.SetIsPublished(b)
	return ehu
}

// SetHavingDraft sets the "havingDraft" field.
func (ehu *ExamHistoryUpdate) SetHavingDraft(b bool) *ExamHistoryUpdate {
	ehu.mutation.SetHavingDraft(b)
	return ehu
}

// SetLastPublishedAt sets the "lastPublishedAt" field.
func (ehu *ExamHistoryUpdate) SetLastPublishedAt(t time.Time) *ExamHistoryUpdate {
	ehu.mutation.SetLastPublishedAt(t)
	return ehu
}

// SetNillableLastPublishedAt sets the "lastPublishedAt" field if the given value is not nil.
func (ehu *ExamHistoryUpdate) SetNillableLastPublishedAt(t *time.Time) *ExamHistoryUpdate {
	if t != nil {
		ehu.SetLastPublishedAt(*t)
	}
	return ehu
}

// ClearLastPublishedAt clears the value of the "lastPublishedAt" field.
func (ehu *ExamHistoryUpdate) ClearLastPublishedAt() *ExamHistoryUpdate {
	ehu.mutation.ClearLastPublishedAt()
	return ehu
}

// SetUpdatedAt sets the "updatedAt" field.
func (ehu *ExamHistoryUpdate) SetUpdatedAt(t time.Time) *ExamHistoryUpdate {
	ehu.mutation.SetUpdatedAt(t)
	return ehu
}

// Mutation returns the ExamHistoryMutation object of the builder.
func (ehu *ExamHistoryUpdate) Mutation() *ExamHistoryMutation {
	return ehu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ehu *ExamHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ehu.sqlSave, ehu.mutation, ehu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ehu *ExamHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := ehu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ehu *ExamHistoryUpdate) Exec(ctx context.Context) error {
	_, err := ehu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehu *ExamHistoryUpdate) ExecX(ctx context.Context) {
	if err := ehu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ehu *ExamHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(examhistory.Table, examhistory.Columns, sqlgraph.NewFieldSpec(examhistory.FieldID, field.TypeInt))
	if ps := ehu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ehu.mutation.RefCleared() {
		_spec.ClearField(examhistory.FieldRef, field.TypeInt)
	}
	if ehu.mutation.UpdatedByCleared() {
		_spec.ClearField(examhistory.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ehu.mutation.Title(); ok {
		_spec.SetField(examhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := ehu.mutation.Context(); ok {
		_spec.SetField(examhistory.FieldContext, field.TypeString, value)
	}
	if value, ok := ehu.mutation.ContextId(); ok {
		_spec.SetField(examhistory.FieldContextId, field.TypeString, value)
	}
	if value, ok := ehu.mutation.IsPublished(); ok {
		_spec.SetField(examhistory.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := ehu.mutation.HavingDraft(); ok {
		_spec.SetField(examhistory.FieldHavingDraft, field.TypeBool, value)
	}
	if value, ok := ehu.mutation.LastPublishedAt(); ok {
		_spec.SetField(examhistory.FieldLastPublishedAt, field.TypeTime, value)
	}
	if ehu.mutation.LastPublishedAtCleared() {
		_spec.ClearField(examhistory.FieldLastPublishedAt, field.TypeTime)
	}
	if value, ok := ehu.mutation.UpdatedAt(); ok {
		_spec.SetField(examhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ehu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ehu.mutation.done = true
	return n, nil
}

// ExamHistoryUpdateOne is the builder for updating a single ExamHistory entity.
type ExamHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExamHistoryMutation
}

// SetTitle sets the "title" field.
func (ehuo *ExamHistoryUpdateOne) SetTitle(s string) *ExamHistoryUpdateOne {
	ehuo.mutation.SetTitle(s)
	return ehuo
}

// SetContext sets the "context" field.
func (ehuo *ExamHistoryUpdateOne) SetContext(s string) *ExamHistoryUpdateOne {
	ehuo.mutation.SetContext(s)
	return ehuo
}

// SetContextId sets the "contextId" field.
func (ehuo *ExamHistoryUpdateOne) SetContextId(s string) *ExamHistoryUpdateOne {
	ehuo.mutation.SetContextId(s)
	return ehuo
}

// SetIsPublished sets the "isPublished" field.
func (ehuo *ExamHistoryUpdateOne) SetIsPublished(b bool) *ExamHistoryUpdateOne {
	ehuo.mutation.SetIsPublished(b)
	return ehuo
}

// SetHavingDraft sets the "havingDraft" field.
func (ehuo *ExamHistoryUpdateOne) SetHavingDraft(b bool) *ExamHistoryUpdateOne {
	ehuo.mutation.SetHavingDraft(b)
	return ehuo
}

// SetLastPublishedAt sets the "lastPublishedAt" field.
func (ehuo *ExamHistoryUpdateOne) SetLastPublishedAt(t time.Time) *ExamHistoryUpdateOne {
	ehuo.mutation.SetLastPublishedAt(t)
	return ehuo
}

// SetNillableLastPublishedAt sets the "lastPublishedAt" field if the given value is not nil.
func (ehuo *ExamHistoryUpdateOne) SetNillableLastPublishedAt(t *time.Time) *ExamHistoryUpdateOne {
	if t != nil {
		ehuo.SetLastPublishedAt(*t)
	}
	return ehuo
}

// ClearLastPublishedAt clears the value of the "lastPublishedAt" field.
func (ehuo *ExamHistoryUpdateOne) ClearLastPublishedAt() *ExamHistoryUpdateOne {
	ehuo.mutation.ClearLastPublishedAt()
	return ehuo
}

// SetUpdatedAt sets the "updatedAt" field.
func (ehuo *ExamHistoryUpdateOne) SetUpdatedAt(t time.Time) *ExamHistoryUpdateOne {
	ehuo.mutation.SetUpdatedAt(t)
	return ehuo
}

// Mutation returns the ExamHistoryMutation object of the builder.
func (ehuo *ExamHistoryUpdateOne) Mutation() *ExamHistoryMutation {
	return ehuo.mutation
}

// Where appends a list predicates to the ExamHistoryUpdate builder.
func (ehuo *ExamHistoryUpdateOne) Where(ps ...predicate.ExamHistory) *ExamHistoryUpdateOne {
	ehuo.mutation.Where(ps...)
	return ehuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ehuo *ExamHistoryUpdateOne) Select(field string, fields ...string) *ExamHistoryUpdateOne {
	ehuo.fields = append([]string{field}, fields...)
	return ehuo
}

// Save executes the query and returns the updated ExamHistory entity.
func (ehuo *ExamHistoryUpdateOne) Save(ctx context.Context) (*ExamHistory, error) {
	return withHooks(ctx, ehuo.sqlSave, ehuo.mutation, ehuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ehuo *ExamHistoryUpdateOne) SaveX(ctx context.Context) *ExamHistory {
	node, err := ehuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ehuo *ExamHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := ehuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ehuo *ExamHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := ehuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ehuo *ExamHistoryUpdateOne) sqlSave(ctx context.Context) (_node *ExamHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(examhistory.Table, examhistory.Columns, sqlgraph.NewFieldSpec(examhistory.FieldID, field.TypeInt))
	id, ok := ehuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ExamHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ehuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, examhistory.FieldID)
		for _, f := range fields {
			if !examhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != examhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ehuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ehuo.mutation.RefCleared() {
		_spec.ClearField(examhistory.FieldRef, field.TypeInt)
	}
	if ehuo.mutation.UpdatedByCleared() {
		_spec.ClearField(examhistory.FieldUpdatedBy, field.TypeInt)
	}
	if value, ok := ehuo.mutation.Title(); ok {
		_spec.SetField(examhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := ehuo.mutation.Context(); ok {
		_spec.SetField(examhistory.FieldContext, field.TypeString, value)
	}
	if value, ok := ehuo.mutation.ContextId(); ok {
		_spec.SetField(examhistory.FieldContextId, field.TypeString, value)
	}
	if value, ok := ehuo.mutation.IsPublished(); ok {
		_spec.SetField(examhistory.FieldIsPublished, field.TypeBool, value)
	}
	if value, ok := ehuo.mutation.HavingDraft(); ok {
		_spec.SetField(examhistory.FieldHavingDraft, field.TypeBool, value)
	}
	if value, ok := ehuo.mutation.LastPublishedAt(); ok {
		_spec.SetField(examhistory.FieldLastPublishedAt, field.TypeTime, value)
	}
	if ehuo.mutation.LastPublishedAtCleared() {
		_spec.ClearField(examhistory.FieldLastPublishedAt, field.TypeTime)
	}
	if value, ok := ehuo.mutation.UpdatedAt(); ok {
		_spec.SetField(examhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &ExamHistory{config: ehuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ehuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{examhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ehuo.mutation.done = true
	return _node, nil
}
