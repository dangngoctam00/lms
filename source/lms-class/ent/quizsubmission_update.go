// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"lms-class/ent/predicate"
	"lms-class/ent/quiz"
	"lms-class/ent/quizsubmission"
	"lms-class/internal/web/dto"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// QuizSubmissionUpdate is the builder for updating QuizSubmission entities.
type QuizSubmissionUpdate struct {
	config
	hooks    []Hook
	mutation *QuizSubmissionMutation
}

// Where appends a list predicates to the QuizSubmissionUpdate builder.
func (qsu *QuizSubmissionUpdate) Where(ps ...predicate.QuizSubmission) *QuizSubmissionUpdate {
	qsu.mutation.Where(ps...)
	return qsu
}

// SetQuizId sets the "quizId" field.
func (qsu *QuizSubmissionUpdate) SetQuizId(i int) *QuizSubmissionUpdate {
	qsu.mutation.SetQuizId(i)
	return qsu
}

// SetUserId sets the "userId" field.
func (qsu *QuizSubmissionUpdate) SetUserId(i int) *QuizSubmissionUpdate {
	qsu.mutation.ResetUserId()
	qsu.mutation.SetUserId(i)
	return qsu
}

// AddUserId adds i to the "userId" field.
func (qsu *QuizSubmissionUpdate) AddUserId(i int) *QuizSubmissionUpdate {
	qsu.mutation.AddUserId(i)
	return qsu
}

// SetStartedAt sets the "startedAt" field.
func (qsu *QuizSubmissionUpdate) SetStartedAt(t time.Time) *QuizSubmissionUpdate {
	qsu.mutation.SetStartedAt(t)
	return qsu
}

// SetSubmittedAt sets the "submittedAt" field.
func (qsu *QuizSubmissionUpdate) SetSubmittedAt(t time.Time) *QuizSubmissionUpdate {
	qsu.mutation.SetSubmittedAt(t)
	return qsu
}

// SetNillableSubmittedAt sets the "submittedAt" field if the given value is not nil.
func (qsu *QuizSubmissionUpdate) SetNillableSubmittedAt(t *time.Time) *QuizSubmissionUpdate {
	if t != nil {
		qsu.SetSubmittedAt(*t)
	}
	return qsu
}

// ClearSubmittedAt clears the value of the "submittedAt" field.
func (qsu *QuizSubmissionUpdate) ClearSubmittedAt() *QuizSubmissionUpdate {
	qsu.mutation.ClearSubmittedAt()
	return qsu
}

// SetQuestions sets the "questions" field.
func (qsu *QuizSubmissionUpdate) SetQuestions(jm json.RawMessage) *QuizSubmissionUpdate {
	qsu.mutation.SetQuestions(jm)
	return qsu
}

// AppendQuestions appends jm to the "questions" field.
func (qsu *QuizSubmissionUpdate) AppendQuestions(jm json.RawMessage) *QuizSubmissionUpdate {
	qsu.mutation.AppendQuestions(jm)
	return qsu
}

// SetAnswers sets the "answers" field.
func (qsu *QuizSubmissionUpdate) SetAnswers(m map[int][]dto.Key) *QuizSubmissionUpdate {
	qsu.mutation.SetAnswers(m)
	return qsu
}

// ClearAnswers clears the value of the "answers" field.
func (qsu *QuizSubmissionUpdate) ClearAnswers() *QuizSubmissionUpdate {
	qsu.mutation.ClearAnswers()
	return qsu
}

// SetScore sets the "score" field.
func (qsu *QuizSubmissionUpdate) SetScore(i int) *QuizSubmissionUpdate {
	qsu.mutation.ResetScore()
	qsu.mutation.SetScore(i)
	return qsu
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (qsu *QuizSubmissionUpdate) SetNillableScore(i *int) *QuizSubmissionUpdate {
	if i != nil {
		qsu.SetScore(*i)
	}
	return qsu
}

// AddScore adds i to the "score" field.
func (qsu *QuizSubmissionUpdate) AddScore(i int) *QuizSubmissionUpdate {
	qsu.mutation.AddScore(i)
	return qsu
}

// ClearScore clears the value of the "score" field.
func (qsu *QuizSubmissionUpdate) ClearScore() *QuizSubmissionUpdate {
	qsu.mutation.ClearScore()
	return qsu
}

// SetQuizID sets the "quiz" edge to the Quiz entity by ID.
func (qsu *QuizSubmissionUpdate) SetQuizID(id int) *QuizSubmissionUpdate {
	qsu.mutation.SetQuizID(id)
	return qsu
}

// SetQuiz sets the "quiz" edge to the Quiz entity.
func (qsu *QuizSubmissionUpdate) SetQuiz(q *Quiz) *QuizSubmissionUpdate {
	return qsu.SetQuizID(q.ID)
}

// Mutation returns the QuizSubmissionMutation object of the builder.
func (qsu *QuizSubmissionUpdate) Mutation() *QuizSubmissionMutation {
	return qsu.mutation
}

// ClearQuiz clears the "quiz" edge to the Quiz entity.
func (qsu *QuizSubmissionUpdate) ClearQuiz() *QuizSubmissionUpdate {
	qsu.mutation.ClearQuiz()
	return qsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qsu *QuizSubmissionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qsu.sqlSave, qsu.mutation, qsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qsu *QuizSubmissionUpdate) SaveX(ctx context.Context) int {
	affected, err := qsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qsu *QuizSubmissionUpdate) Exec(ctx context.Context) error {
	_, err := qsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qsu *QuizSubmissionUpdate) ExecX(ctx context.Context) {
	if err := qsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qsu *QuizSubmissionUpdate) check() error {
	if _, ok := qsu.mutation.QuizID(); qsu.mutation.QuizCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QuizSubmission.quiz"`)
	}
	return nil
}

func (qsu *QuizSubmissionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(quizsubmission.Table, quizsubmission.Columns, sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt))
	if ps := qsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qsu.mutation.UserId(); ok {
		_spec.SetField(quizsubmission.FieldUserId, field.TypeInt, value)
	}
	if value, ok := qsu.mutation.AddedUserId(); ok {
		_spec.AddField(quizsubmission.FieldUserId, field.TypeInt, value)
	}
	if value, ok := qsu.mutation.StartedAt(); ok {
		_spec.SetField(quizsubmission.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := qsu.mutation.SubmittedAt(); ok {
		_spec.SetField(quizsubmission.FieldSubmittedAt, field.TypeTime, value)
	}
	if qsu.mutation.SubmittedAtCleared() {
		_spec.ClearField(quizsubmission.FieldSubmittedAt, field.TypeTime)
	}
	if value, ok := qsu.mutation.Questions(); ok {
		_spec.SetField(quizsubmission.FieldQuestions, field.TypeJSON, value)
	}
	if value, ok := qsu.mutation.AppendedQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, quizsubmission.FieldQuestions, value)
		})
	}
	if value, ok := qsu.mutation.Answers(); ok {
		_spec.SetField(quizsubmission.FieldAnswers, field.TypeJSON, value)
	}
	if qsu.mutation.AnswersCleared() {
		_spec.ClearField(quizsubmission.FieldAnswers, field.TypeJSON)
	}
	if value, ok := qsu.mutation.Score(); ok {
		_spec.SetField(quizsubmission.FieldScore, field.TypeInt, value)
	}
	if value, ok := qsu.mutation.AddedScore(); ok {
		_spec.AddField(quizsubmission.FieldScore, field.TypeInt, value)
	}
	if qsu.mutation.ScoreCleared() {
		_spec.ClearField(quizsubmission.FieldScore, field.TypeInt)
	}
	if qsu.mutation.QuizCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quizsubmission.QuizTable,
			Columns: []string{quizsubmission.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qsu.mutation.QuizIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quizsubmission.QuizTable,
			Columns: []string{quizsubmission.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quizsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qsu.mutation.done = true
	return n, nil
}

// QuizSubmissionUpdateOne is the builder for updating a single QuizSubmission entity.
type QuizSubmissionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuizSubmissionMutation
}

// SetQuizId sets the "quizId" field.
func (qsuo *QuizSubmissionUpdateOne) SetQuizId(i int) *QuizSubmissionUpdateOne {
	qsuo.mutation.SetQuizId(i)
	return qsuo
}

// SetUserId sets the "userId" field.
func (qsuo *QuizSubmissionUpdateOne) SetUserId(i int) *QuizSubmissionUpdateOne {
	qsuo.mutation.ResetUserId()
	qsuo.mutation.SetUserId(i)
	return qsuo
}

// AddUserId adds i to the "userId" field.
func (qsuo *QuizSubmissionUpdateOne) AddUserId(i int) *QuizSubmissionUpdateOne {
	qsuo.mutation.AddUserId(i)
	return qsuo
}

// SetStartedAt sets the "startedAt" field.
func (qsuo *QuizSubmissionUpdateOne) SetStartedAt(t time.Time) *QuizSubmissionUpdateOne {
	qsuo.mutation.SetStartedAt(t)
	return qsuo
}

// SetSubmittedAt sets the "submittedAt" field.
func (qsuo *QuizSubmissionUpdateOne) SetSubmittedAt(t time.Time) *QuizSubmissionUpdateOne {
	qsuo.mutation.SetSubmittedAt(t)
	return qsuo
}

// SetNillableSubmittedAt sets the "submittedAt" field if the given value is not nil.
func (qsuo *QuizSubmissionUpdateOne) SetNillableSubmittedAt(t *time.Time) *QuizSubmissionUpdateOne {
	if t != nil {
		qsuo.SetSubmittedAt(*t)
	}
	return qsuo
}

// ClearSubmittedAt clears the value of the "submittedAt" field.
func (qsuo *QuizSubmissionUpdateOne) ClearSubmittedAt() *QuizSubmissionUpdateOne {
	qsuo.mutation.ClearSubmittedAt()
	return qsuo
}

// SetQuestions sets the "questions" field.
func (qsuo *QuizSubmissionUpdateOne) SetQuestions(jm json.RawMessage) *QuizSubmissionUpdateOne {
	qsuo.mutation.SetQuestions(jm)
	return qsuo
}

// AppendQuestions appends jm to the "questions" field.
func (qsuo *QuizSubmissionUpdateOne) AppendQuestions(jm json.RawMessage) *QuizSubmissionUpdateOne {
	qsuo.mutation.AppendQuestions(jm)
	return qsuo
}

// SetAnswers sets the "answers" field.
func (qsuo *QuizSubmissionUpdateOne) SetAnswers(m map[int][]dto.Key) *QuizSubmissionUpdateOne {
	qsuo.mutation.SetAnswers(m)
	return qsuo
}

// ClearAnswers clears the value of the "answers" field.
func (qsuo *QuizSubmissionUpdateOne) ClearAnswers() *QuizSubmissionUpdateOne {
	qsuo.mutation.ClearAnswers()
	return qsuo
}

// SetScore sets the "score" field.
func (qsuo *QuizSubmissionUpdateOne) SetScore(i int) *QuizSubmissionUpdateOne {
	qsuo.mutation.ResetScore()
	qsuo.mutation.SetScore(i)
	return qsuo
}

// SetNillableScore sets the "score" field if the given value is not nil.
func (qsuo *QuizSubmissionUpdateOne) SetNillableScore(i *int) *QuizSubmissionUpdateOne {
	if i != nil {
		qsuo.SetScore(*i)
	}
	return qsuo
}

// AddScore adds i to the "score" field.
func (qsuo *QuizSubmissionUpdateOne) AddScore(i int) *QuizSubmissionUpdateOne {
	qsuo.mutation.AddScore(i)
	return qsuo
}

// ClearScore clears the value of the "score" field.
func (qsuo *QuizSubmissionUpdateOne) ClearScore() *QuizSubmissionUpdateOne {
	qsuo.mutation.ClearScore()
	return qsuo
}

// SetQuizID sets the "quiz" edge to the Quiz entity by ID.
func (qsuo *QuizSubmissionUpdateOne) SetQuizID(id int) *QuizSubmissionUpdateOne {
	qsuo.mutation.SetQuizID(id)
	return qsuo
}

// SetQuiz sets the "quiz" edge to the Quiz entity.
func (qsuo *QuizSubmissionUpdateOne) SetQuiz(q *Quiz) *QuizSubmissionUpdateOne {
	return qsuo.SetQuizID(q.ID)
}

// Mutation returns the QuizSubmissionMutation object of the builder.
func (qsuo *QuizSubmissionUpdateOne) Mutation() *QuizSubmissionMutation {
	return qsuo.mutation
}

// ClearQuiz clears the "quiz" edge to the Quiz entity.
func (qsuo *QuizSubmissionUpdateOne) ClearQuiz() *QuizSubmissionUpdateOne {
	qsuo.mutation.ClearQuiz()
	return qsuo
}

// Where appends a list predicates to the QuizSubmissionUpdate builder.
func (qsuo *QuizSubmissionUpdateOne) Where(ps ...predicate.QuizSubmission) *QuizSubmissionUpdateOne {
	qsuo.mutation.Where(ps...)
	return qsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (qsuo *QuizSubmissionUpdateOne) Select(field string, fields ...string) *QuizSubmissionUpdateOne {
	qsuo.fields = append([]string{field}, fields...)
	return qsuo
}

// Save executes the query and returns the updated QuizSubmission entity.
func (qsuo *QuizSubmissionUpdateOne) Save(ctx context.Context) (*QuizSubmission, error) {
	return withHooks(ctx, qsuo.sqlSave, qsuo.mutation, qsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qsuo *QuizSubmissionUpdateOne) SaveX(ctx context.Context) *QuizSubmission {
	node, err := qsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (qsuo *QuizSubmissionUpdateOne) Exec(ctx context.Context) error {
	_, err := qsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qsuo *QuizSubmissionUpdateOne) ExecX(ctx context.Context) {
	if err := qsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qsuo *QuizSubmissionUpdateOne) check() error {
	if _, ok := qsuo.mutation.QuizID(); qsuo.mutation.QuizCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "QuizSubmission.quiz"`)
	}
	return nil
}

func (qsuo *QuizSubmissionUpdateOne) sqlSave(ctx context.Context) (_node *QuizSubmission, err error) {
	if err := qsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(quizsubmission.Table, quizsubmission.Columns, sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt))
	id, ok := qsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "QuizSubmission.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := qsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quizsubmission.FieldID)
		for _, f := range fields {
			if !quizsubmission.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != quizsubmission.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := qsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qsuo.mutation.UserId(); ok {
		_spec.SetField(quizsubmission.FieldUserId, field.TypeInt, value)
	}
	if value, ok := qsuo.mutation.AddedUserId(); ok {
		_spec.AddField(quizsubmission.FieldUserId, field.TypeInt, value)
	}
	if value, ok := qsuo.mutation.StartedAt(); ok {
		_spec.SetField(quizsubmission.FieldStartedAt, field.TypeTime, value)
	}
	if value, ok := qsuo.mutation.SubmittedAt(); ok {
		_spec.SetField(quizsubmission.FieldSubmittedAt, field.TypeTime, value)
	}
	if qsuo.mutation.SubmittedAtCleared() {
		_spec.ClearField(quizsubmission.FieldSubmittedAt, field.TypeTime)
	}
	if value, ok := qsuo.mutation.Questions(); ok {
		_spec.SetField(quizsubmission.FieldQuestions, field.TypeJSON, value)
	}
	if value, ok := qsuo.mutation.AppendedQuestions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, quizsubmission.FieldQuestions, value)
		})
	}
	if value, ok := qsuo.mutation.Answers(); ok {
		_spec.SetField(quizsubmission.FieldAnswers, field.TypeJSON, value)
	}
	if qsuo.mutation.AnswersCleared() {
		_spec.ClearField(quizsubmission.FieldAnswers, field.TypeJSON)
	}
	if value, ok := qsuo.mutation.Score(); ok {
		_spec.SetField(quizsubmission.FieldScore, field.TypeInt, value)
	}
	if value, ok := qsuo.mutation.AddedScore(); ok {
		_spec.AddField(quizsubmission.FieldScore, field.TypeInt, value)
	}
	if qsuo.mutation.ScoreCleared() {
		_spec.ClearField(quizsubmission.FieldScore, field.TypeInt)
	}
	if qsuo.mutation.QuizCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quizsubmission.QuizTable,
			Columns: []string{quizsubmission.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qsuo.mutation.QuizIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quizsubmission.QuizTable,
			Columns: []string{quizsubmission.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(quiz.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &QuizSubmission{config: qsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, qsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quizsubmission.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	qsuo.mutation.done = true
	return _node, nil
}
