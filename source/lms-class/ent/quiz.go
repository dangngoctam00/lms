// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lms-class/ent/exam"
	"lms-class/ent/quiz"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Quiz is the model entity for the Quiz schema.
type Quiz struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// GradeTag holds the value of the "gradeTag" field.
	GradeTag string `json:"gradeTag,omitempty"`
	// ExamId holds the value of the "examId" field.
	ExamId *int `json:"examId,omitempty"`
	// IsPublished holds the value of the "isPublished" field.
	IsPublished bool `json:"isPublished,omitempty"`
	// CreatedAt holds the value of the "createdAt" field.
	CreatedAt time.Time `json:"createdAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// ContextId holds the value of the "contextId" field.
	ContextId int `json:"contextId,omitempty"`
	// ParentId holds the value of the "parentId" field.
	ParentId *int `json:"parentId,omitempty"`
	// StartedAt holds the value of the "startedAt" field.
	StartedAt *time.Time `json:"startedAt,omitempty"`
	// FinishedAt holds the value of the "finishedAt" field.
	FinishedAt *time.Time `json:"finishedAt,omitempty"`
	// TimeLimit holds the value of the "timeLimit" field.
	TimeLimit *int `json:"timeLimit,omitempty"`
	// MaxAttempt holds the value of the "maxAttempt" field.
	MaxAttempt *int `json:"maxAttempt,omitempty"`
	// ViewPreviousSessions holds the value of the "viewPreviousSessions" field.
	ViewPreviousSessions bool `json:"viewPreviousSessions,omitempty"`
	// ViewPreviousSessionsTime holds the value of the "viewPreviousSessionsTime" field.
	ViewPreviousSessionsTime *time.Time `json:"viewPreviousSessionsTime,omitempty"`
	// ViewResult holds the value of the "viewResult" field.
	ViewResult bool `json:"viewResult,omitempty"`
	// PassedScore holds the value of the "passedScore" field.
	PassedScore *int `json:"passedScore,omitempty"`
	// FinalGradedStrategy holds the value of the "finalGradedStrategy" field.
	FinalGradedStrategy *string `json:"finalGradedStrategy,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuizQuery when eager-loading is set.
	Edges        QuizEdges `json:"edges"`
	selectValues sql.SelectValues
}

// QuizEdges holds the relations/edges for other nodes in the graph.
type QuizEdges struct {
	// Exam holds the value of the exam edge.
	Exam *Exam `json:"exam,omitempty"`
	// Submissions holds the value of the submissions edge.
	Submissions []*QuizSubmission `json:"submissions,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ExamOrErr returns the Exam value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuizEdges) ExamOrErr() (*Exam, error) {
	if e.loadedTypes[0] {
		if e.Exam == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: exam.Label}
		}
		return e.Exam, nil
	}
	return nil, &NotLoadedError{edge: "exam"}
}

// SubmissionsOrErr returns the Submissions value or an error if the edge
// was not loaded in eager-loading.
func (e QuizEdges) SubmissionsOrErr() ([]*QuizSubmission, error) {
	if e.loadedTypes[1] {
		return e.Submissions, nil
	}
	return nil, &NotLoadedError{edge: "submissions"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quiz) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case quiz.FieldIsPublished, quiz.FieldViewPreviousSessions, quiz.FieldViewResult:
			values[i] = new(sql.NullBool)
		case quiz.FieldID, quiz.FieldExamId, quiz.FieldContextId, quiz.FieldParentId, quiz.FieldTimeLimit, quiz.FieldMaxAttempt, quiz.FieldPassedScore:
			values[i] = new(sql.NullInt64)
		case quiz.FieldTitle, quiz.FieldDescription, quiz.FieldGradeTag, quiz.FieldContext, quiz.FieldFinalGradedStrategy:
			values[i] = new(sql.NullString)
		case quiz.FieldCreatedAt, quiz.FieldUpdatedAt, quiz.FieldStartedAt, quiz.FieldFinishedAt, quiz.FieldViewPreviousSessionsTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quiz fields.
func (q *Quiz) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quiz.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case quiz.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				q.Title = value.String
			}
		case quiz.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				q.Description = value.String
			}
		case quiz.FieldGradeTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gradeTag", values[i])
			} else if value.Valid {
				q.GradeTag = value.String
			}
		case quiz.FieldExamId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field examId", values[i])
			} else if value.Valid {
				q.ExamId = new(int)
				*q.ExamId = int(value.Int64)
			}
		case quiz.FieldIsPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isPublished", values[i])
			} else if value.Valid {
				q.IsPublished = value.Bool
			}
		case quiz.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field createdAt", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case quiz.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case quiz.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				q.Context = value.String
			}
		case quiz.FieldContextId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field contextId", values[i])
			} else if value.Valid {
				q.ContextId = int(value.Int64)
			}
		case quiz.FieldParentId:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field parentId", values[i])
			} else if value.Valid {
				q.ParentId = new(int)
				*q.ParentId = int(value.Int64)
			}
		case quiz.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startedAt", values[i])
			} else if value.Valid {
				q.StartedAt = new(time.Time)
				*q.StartedAt = value.Time
			}
		case quiz.FieldFinishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field finishedAt", values[i])
			} else if value.Valid {
				q.FinishedAt = new(time.Time)
				*q.FinishedAt = value.Time
			}
		case quiz.FieldTimeLimit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeLimit", values[i])
			} else if value.Valid {
				q.TimeLimit = new(int)
				*q.TimeLimit = int(value.Int64)
			}
		case quiz.FieldMaxAttempt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field maxAttempt", values[i])
			} else if value.Valid {
				q.MaxAttempt = new(int)
				*q.MaxAttempt = int(value.Int64)
			}
		case quiz.FieldViewPreviousSessions:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field viewPreviousSessions", values[i])
			} else if value.Valid {
				q.ViewPreviousSessions = value.Bool
			}
		case quiz.FieldViewPreviousSessionsTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field viewPreviousSessionsTime", values[i])
			} else if value.Valid {
				q.ViewPreviousSessionsTime = new(time.Time)
				*q.ViewPreviousSessionsTime = value.Time
			}
		case quiz.FieldViewResult:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field viewResult", values[i])
			} else if value.Valid {
				q.ViewResult = value.Bool
			}
		case quiz.FieldPassedScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field passedScore", values[i])
			} else if value.Valid {
				q.PassedScore = new(int)
				*q.PassedScore = int(value.Int64)
			}
		case quiz.FieldFinalGradedStrategy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field finalGradedStrategy", values[i])
			} else if value.Valid {
				q.FinalGradedStrategy = new(string)
				*q.FinalGradedStrategy = value.String
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Quiz.
// This includes values selected through modifiers, order, etc.
func (q *Quiz) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// QueryExam queries the "exam" edge of the Quiz entity.
func (q *Quiz) QueryExam() *ExamQuery {
	return NewQuizClient(q.config).QueryExam(q)
}

// QuerySubmissions queries the "submissions" edge of the Quiz entity.
func (q *Quiz) QuerySubmissions() *QuizSubmissionQuery {
	return NewQuizClient(q.config).QuerySubmissions(q)
}

// Update returns a builder for updating this Quiz.
// Note that you need to call Quiz.Unwrap() before calling this method if this Quiz
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quiz) Update() *QuizUpdateOne {
	return NewQuizClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Quiz entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quiz) Unwrap() *Quiz {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quiz is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quiz) String() string {
	var builder strings.Builder
	builder.WriteString("Quiz(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("title=")
	builder.WriteString(q.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(q.Description)
	builder.WriteString(", ")
	builder.WriteString("gradeTag=")
	builder.WriteString(q.GradeTag)
	builder.WriteString(", ")
	if v := q.ExamId; v != nil {
		builder.WriteString("examId=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("isPublished=")
	builder.WriteString(fmt.Sprintf("%v", q.IsPublished))
	builder.WriteString(", ")
	builder.WriteString("createdAt=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(q.Context)
	builder.WriteString(", ")
	builder.WriteString("contextId=")
	builder.WriteString(fmt.Sprintf("%v", q.ContextId))
	builder.WriteString(", ")
	if v := q.ParentId; v != nil {
		builder.WriteString("parentId=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := q.StartedAt; v != nil {
		builder.WriteString("startedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := q.FinishedAt; v != nil {
		builder.WriteString("finishedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := q.TimeLimit; v != nil {
		builder.WriteString("timeLimit=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := q.MaxAttempt; v != nil {
		builder.WriteString("maxAttempt=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("viewPreviousSessions=")
	builder.WriteString(fmt.Sprintf("%v", q.ViewPreviousSessions))
	builder.WriteString(", ")
	if v := q.ViewPreviousSessionsTime; v != nil {
		builder.WriteString("viewPreviousSessionsTime=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("viewResult=")
	builder.WriteString(fmt.Sprintf("%v", q.ViewResult))
	builder.WriteString(", ")
	if v := q.PassedScore; v != nil {
		builder.WriteString("passedScore=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := q.FinalGradedStrategy; v != nil {
		builder.WriteString("finalGradedStrategy=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Quizs is a parsable slice of Quiz.
type Quizs []*Quiz
