// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"lms-class/ent/predicate"
	entquestion "lms-class/ent/question"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetContext sets the "context" field.
func (qu *QuestionUpdate) SetContext(s string) *QuestionUpdate {
	qu.mutation.SetContext(s)
	return qu
}

// SetContextId sets the "contextId" field.
func (qu *QuestionUpdate) SetContextId(i int) *QuestionUpdate {
	qu.mutation.ResetContextId()
	qu.mutation.SetContextId(i)
	return qu
}

// AddContextId adds i to the "contextId" field.
func (qu *QuestionUpdate) AddContextId(i int) *QuestionUpdate {
	qu.mutation.AddContextId(i)
	return qu
}

// SetPosition sets the "position" field.
func (qu *QuestionUpdate) SetPosition(i int) *QuestionUpdate {
	qu.mutation.ResetPosition()
	qu.mutation.SetPosition(i)
	return qu
}

// AddPosition adds i to the "position" field.
func (qu *QuestionUpdate) AddPosition(i int) *QuestionUpdate {
	qu.mutation.AddPosition(i)
	return qu
}

// SetQuestionType sets the "questionType" field.
func (qu *QuestionUpdate) SetQuestionType(s string) *QuestionUpdate {
	qu.mutation.SetQuestionType(s)
	return qu
}

// SetData sets the "data" field.
func (qu *QuestionUpdate) SetData(jm json.RawMessage) *QuestionUpdate {
	qu.mutation.SetData(jm)
	return qu
}

// AppendData appends jm to the "data" field.
func (qu *QuestionUpdate) AppendData(jm json.RawMessage) *QuestionUpdate {
	qu.mutation.AppendData(jm)
	return qu
}

// SetUpdatedAt sets the "updatedAt" field.
func (qu *QuestionUpdate) SetUpdatedAt(t time.Time) *QuestionUpdate {
	qu.mutation.SetUpdatedAt(t)
	return qu
}

// SetVersion sets the "version" field.
func (qu *QuestionUpdate) SetVersion(i int64) *QuestionUpdate {
	qu.mutation.ResetVersion()
	qu.mutation.SetVersion(i)
	return qu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (qu *QuestionUpdate) SetNillableVersion(i *int64) *QuestionUpdate {
	if i != nil {
		qu.SetVersion(*i)
	}
	return qu
}

// AddVersion adds i to the "version" field.
func (qu *QuestionUpdate) AddVersion(i int64) *QuestionUpdate {
	qu.mutation.AddVersion(i)
	return qu
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(entquestion.Table, entquestion.Columns, sqlgraph.NewFieldSpec(entquestion.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Context(); ok {
		_spec.SetField(entquestion.FieldContext, field.TypeString, value)
	}
	if value, ok := qu.mutation.ContextId(); ok {
		_spec.SetField(entquestion.FieldContextId, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedContextId(); ok {
		_spec.AddField(entquestion.FieldContextId, field.TypeInt, value)
	}
	if value, ok := qu.mutation.Position(); ok {
		_spec.SetField(entquestion.FieldPosition, field.TypeInt, value)
	}
	if value, ok := qu.mutation.AddedPosition(); ok {
		_spec.AddField(entquestion.FieldPosition, field.TypeInt, value)
	}
	if value, ok := qu.mutation.QuestionType(); ok {
		_spec.SetField(entquestion.FieldQuestionType, field.TypeString, value)
	}
	if value, ok := qu.mutation.Data(); ok {
		_spec.SetField(entquestion.FieldData, field.TypeJSON, value)
	}
	if value, ok := qu.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entquestion.FieldData, value)
		})
	}
	if value, ok := qu.mutation.UpdatedAt(); ok {
		_spec.SetField(entquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := qu.mutation.Version(); ok {
		_spec.SetField(entquestion.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := qu.mutation.AddedVersion(); ok {
		_spec.AddField(entquestion.FieldVersion, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QuestionMutation
}

// SetContext sets the "context" field.
func (quo *QuestionUpdateOne) SetContext(s string) *QuestionUpdateOne {
	quo.mutation.SetContext(s)
	return quo
}

// SetContextId sets the "contextId" field.
func (quo *QuestionUpdateOne) SetContextId(i int) *QuestionUpdateOne {
	quo.mutation.ResetContextId()
	quo.mutation.SetContextId(i)
	return quo
}

// AddContextId adds i to the "contextId" field.
func (quo *QuestionUpdateOne) AddContextId(i int) *QuestionUpdateOne {
	quo.mutation.AddContextId(i)
	return quo
}

// SetPosition sets the "position" field.
func (quo *QuestionUpdateOne) SetPosition(i int) *QuestionUpdateOne {
	quo.mutation.ResetPosition()
	quo.mutation.SetPosition(i)
	return quo
}

// AddPosition adds i to the "position" field.
func (quo *QuestionUpdateOne) AddPosition(i int) *QuestionUpdateOne {
	quo.mutation.AddPosition(i)
	return quo
}

// SetQuestionType sets the "questionType" field.
func (quo *QuestionUpdateOne) SetQuestionType(s string) *QuestionUpdateOne {
	quo.mutation.SetQuestionType(s)
	return quo
}

// SetData sets the "data" field.
func (quo *QuestionUpdateOne) SetData(jm json.RawMessage) *QuestionUpdateOne {
	quo.mutation.SetData(jm)
	return quo
}

// AppendData appends jm to the "data" field.
func (quo *QuestionUpdateOne) AppendData(jm json.RawMessage) *QuestionUpdateOne {
	quo.mutation.AppendData(jm)
	return quo
}

// SetUpdatedAt sets the "updatedAt" field.
func (quo *QuestionUpdateOne) SetUpdatedAt(t time.Time) *QuestionUpdateOne {
	quo.mutation.SetUpdatedAt(t)
	return quo
}

// SetVersion sets the "version" field.
func (quo *QuestionUpdateOne) SetVersion(i int64) *QuestionUpdateOne {
	quo.mutation.ResetVersion()
	quo.mutation.SetVersion(i)
	return quo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableVersion(i *int64) *QuestionUpdateOne {
	if i != nil {
		quo.SetVersion(*i)
	}
	return quo
}

// AddVersion adds i to the "version" field.
func (quo *QuestionUpdateOne) AddVersion(i int64) *QuestionUpdateOne {
	quo.mutation.AddVersion(i)
	return quo
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// Where appends a list predicates to the QuestionUpdate builder.
func (quo *QuestionUpdateOne) Where(ps ...predicate.Question) *QuestionUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QuestionUpdateOne) Select(field string, fields ...string) *QuestionUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := sqlgraph.NewUpdateSpec(entquestion.Table, entquestion.Columns, sqlgraph.NewFieldSpec(entquestion.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Question.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, entquestion.FieldID)
		for _, f := range fields {
			if !entquestion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != entquestion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Context(); ok {
		_spec.SetField(entquestion.FieldContext, field.TypeString, value)
	}
	if value, ok := quo.mutation.ContextId(); ok {
		_spec.SetField(entquestion.FieldContextId, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedContextId(); ok {
		_spec.AddField(entquestion.FieldContextId, field.TypeInt, value)
	}
	if value, ok := quo.mutation.Position(); ok {
		_spec.SetField(entquestion.FieldPosition, field.TypeInt, value)
	}
	if value, ok := quo.mutation.AddedPosition(); ok {
		_spec.AddField(entquestion.FieldPosition, field.TypeInt, value)
	}
	if value, ok := quo.mutation.QuestionType(); ok {
		_spec.SetField(entquestion.FieldQuestionType, field.TypeString, value)
	}
	if value, ok := quo.mutation.Data(); ok {
		_spec.SetField(entquestion.FieldData, field.TypeJSON, value)
	}
	if value, ok := quo.mutation.AppendedData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, entquestion.FieldData, value)
		})
	}
	if value, ok := quo.mutation.UpdatedAt(); ok {
		_spec.SetField(entquestion.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := quo.mutation.Version(); ok {
		_spec.SetField(entquestion.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := quo.mutation.AddedVersion(); ok {
		_spec.AddField(entquestion.FieldVersion, field.TypeInt64, value)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{entquestion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
