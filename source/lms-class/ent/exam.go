// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"lms-class/ent/exam"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Exam is the model entity for the Exam schema.
type Exam struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Context holds the value of the "context" field.
	Context string `json:"context,omitempty"`
	// ContextId holds the value of the "contextId" field.
	ContextId string `json:"contextId,omitempty"`
	// IsPublished holds the value of the "isPublished" field.
	IsPublished bool `json:"isPublished,omitempty"`
	// HavingDraft holds the value of the "havingDraft" field.
	HavingDraft bool `json:"havingDraft,omitempty"`
	// LastPublishedAt holds the value of the "lastPublishedAt" field.
	LastPublishedAt *time.Time `json:"lastPublishedAt,omitempty"`
	// UpdatedAt holds the value of the "updatedAt" field.
	UpdatedAt time.Time `json:"updatedAt,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExamQuery when eager-loading is set.
	Edges        ExamEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ExamEdges holds the relations/edges for other nodes in the graph.
type ExamEdges struct {
	// Quizzes holds the value of the quizzes edge.
	Quizzes []*Quiz `json:"quizzes,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// QuizzesOrErr returns the Quizzes value or an error if the edge
// was not loaded in eager-loading.
func (e ExamEdges) QuizzesOrErr() ([]*Quiz, error) {
	if e.loadedTypes[0] {
		return e.Quizzes, nil
	}
	return nil, &NotLoadedError{edge: "quizzes"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Exam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case exam.FieldIsPublished, exam.FieldHavingDraft:
			values[i] = new(sql.NullBool)
		case exam.FieldID:
			values[i] = new(sql.NullInt64)
		case exam.FieldTitle, exam.FieldContext, exam.FieldContextId:
			values[i] = new(sql.NullString)
		case exam.FieldLastPublishedAt, exam.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Exam fields.
func (e *Exam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case exam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case exam.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case exam.FieldContext:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field context", values[i])
			} else if value.Valid {
				e.Context = value.String
			}
		case exam.FieldContextId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contextId", values[i])
			} else if value.Valid {
				e.ContextId = value.String
			}
		case exam.FieldIsPublished:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isPublished", values[i])
			} else if value.Valid {
				e.IsPublished = value.Bool
			}
		case exam.FieldHavingDraft:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field havingDraft", values[i])
			} else if value.Valid {
				e.HavingDraft = value.Bool
			}
		case exam.FieldLastPublishedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field lastPublishedAt", values[i])
			} else if value.Valid {
				e.LastPublishedAt = new(time.Time)
				*e.LastPublishedAt = value.Time
			}
		case exam.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updatedAt", values[i])
			} else if value.Valid {
				e.UpdatedAt = value.Time
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Exam.
// This includes values selected through modifiers, order, etc.
func (e *Exam) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryQuizzes queries the "quizzes" edge of the Exam entity.
func (e *Exam) QueryQuizzes() *QuizQuery {
	return NewExamClient(e.config).QueryQuizzes(e)
}

// Update returns a builder for updating this Exam.
// Note that you need to call Exam.Unwrap() before calling this method if this Exam
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Exam) Update() *ExamUpdateOne {
	return NewExamClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Exam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Exam) Unwrap() *Exam {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Exam is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Exam) String() string {
	var builder strings.Builder
	builder.WriteString("Exam(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("title=")
	builder.WriteString(e.Title)
	builder.WriteString(", ")
	builder.WriteString("context=")
	builder.WriteString(e.Context)
	builder.WriteString(", ")
	builder.WriteString("contextId=")
	builder.WriteString(e.ContextId)
	builder.WriteString(", ")
	builder.WriteString("isPublished=")
	builder.WriteString(fmt.Sprintf("%v", e.IsPublished))
	builder.WriteString(", ")
	builder.WriteString("havingDraft=")
	builder.WriteString(fmt.Sprintf("%v", e.HavingDraft))
	builder.WriteString(", ")
	if v := e.LastPublishedAt; v != nil {
		builder.WriteString("lastPublishedAt=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("updatedAt=")
	builder.WriteString(e.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Exams is a parsable slice of Exam.
type Exams []*Exam
