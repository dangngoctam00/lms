// Code generated by ent, DO NOT EDIT.

package quizsubmission

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the quizsubmission type in the database.
	Label = "quiz_submission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldQuizId holds the string denoting the quizid field in the database.
	FieldQuizId = "quiz_id"
	// FieldUserId holds the string denoting the userid field in the database.
	FieldUserId = "user_id"
	// FieldStartedAt holds the string denoting the startedat field in the database.
	FieldStartedAt = "started_at"
	// FieldSubmittedAt holds the string denoting the submittedat field in the database.
	FieldSubmittedAt = "submitted_at"
	// FieldQuestions holds the string denoting the questions field in the database.
	FieldQuestions = "questions"
	// FieldAnswers holds the string denoting the answers field in the database.
	FieldAnswers = "answers"
	// FieldScore holds the string denoting the score field in the database.
	FieldScore = "score"
	// EdgeQuiz holds the string denoting the quiz edge name in mutations.
	EdgeQuiz = "quiz"
	// Table holds the table name of the quizsubmission in the database.
	Table = "quiz_submission"
	// QuizTable is the table that holds the quiz relation/edge.
	QuizTable = "quiz_submission"
	// QuizInverseTable is the table name for the Quiz entity.
	// It exists in this package in order to avoid circular dependency with the "quiz" package.
	QuizInverseTable = "quiz"
	// QuizColumn is the table column denoting the quiz relation/edge.
	QuizColumn = "quiz_id"
)

// Columns holds all SQL columns for quizsubmission fields.
var Columns = []string{
	FieldID,
	FieldQuizId,
	FieldUserId,
	FieldStartedAt,
	FieldSubmittedAt,
	FieldQuestions,
	FieldAnswers,
	FieldScore,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the QuizSubmission queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByQuizId orders the results by the quizId field.
func ByQuizId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuizId, opts...).ToFunc()
}

// ByUserId orders the results by the userId field.
func ByUserId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserId, opts...).ToFunc()
}

// ByStartedAt orders the results by the startedAt field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// BySubmittedAt orders the results by the submittedAt field.
func BySubmittedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubmittedAt, opts...).ToFunc()
}

// ByScore orders the results by the score field.
func ByScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScore, opts...).ToFunc()
}

// ByQuizField orders the results by quiz field.
func ByQuizField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newQuizStep(), sql.OrderByField(field, opts...))
	}
}
func newQuizStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(QuizInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, QuizTable, QuizColumn),
	)
}
