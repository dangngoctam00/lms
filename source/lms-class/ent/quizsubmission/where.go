// Code generated by ent, DO NOT EDIT.

package quizsubmission

import (
	"lms-class/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLTE(FieldID, id))
}

// QuizId applies equality check predicate on the "quizId" field. It's identical to QuizIdEQ.
func QuizId(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldQuizId, v))
}

// UserId applies equality check predicate on the "userId" field. It's identical to UserIdEQ.
func UserId(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldUserId, v))
}

// StartedAt applies equality check predicate on the "startedAt" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldStartedAt, v))
}

// SubmittedAt applies equality check predicate on the "submittedAt" field. It's identical to SubmittedAtEQ.
func SubmittedAt(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldSubmittedAt, v))
}

// Score applies equality check predicate on the "score" field. It's identical to ScoreEQ.
func Score(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldScore, v))
}

// QuizIdEQ applies the EQ predicate on the "quizId" field.
func QuizIdEQ(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldQuizId, v))
}

// QuizIdNEQ applies the NEQ predicate on the "quizId" field.
func QuizIdNEQ(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNEQ(FieldQuizId, v))
}

// QuizIdIn applies the In predicate on the "quizId" field.
func QuizIdIn(vs ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIn(FieldQuizId, vs...))
}

// QuizIdNotIn applies the NotIn predicate on the "quizId" field.
func QuizIdNotIn(vs ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotIn(FieldQuizId, vs...))
}

// UserIdEQ applies the EQ predicate on the "userId" field.
func UserIdEQ(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldUserId, v))
}

// UserIdNEQ applies the NEQ predicate on the "userId" field.
func UserIdNEQ(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNEQ(FieldUserId, v))
}

// UserIdIn applies the In predicate on the "userId" field.
func UserIdIn(vs ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIn(FieldUserId, vs...))
}

// UserIdNotIn applies the NotIn predicate on the "userId" field.
func UserIdNotIn(vs ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotIn(FieldUserId, vs...))
}

// UserIdGT applies the GT predicate on the "userId" field.
func UserIdGT(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGT(FieldUserId, v))
}

// UserIdGTE applies the GTE predicate on the "userId" field.
func UserIdGTE(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGTE(FieldUserId, v))
}

// UserIdLT applies the LT predicate on the "userId" field.
func UserIdLT(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLT(FieldUserId, v))
}

// UserIdLTE applies the LTE predicate on the "userId" field.
func UserIdLTE(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLTE(FieldUserId, v))
}

// StartedAtEQ applies the EQ predicate on the "startedAt" field.
func StartedAtEQ(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "startedAt" field.
func StartedAtNEQ(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "startedAt" field.
func StartedAtIn(vs ...time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "startedAt" field.
func StartedAtNotIn(vs ...time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "startedAt" field.
func StartedAtGT(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "startedAt" field.
func StartedAtGTE(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "startedAt" field.
func StartedAtLT(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "startedAt" field.
func StartedAtLTE(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLTE(FieldStartedAt, v))
}

// SubmittedAtEQ applies the EQ predicate on the "submittedAt" field.
func SubmittedAtEQ(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldSubmittedAt, v))
}

// SubmittedAtNEQ applies the NEQ predicate on the "submittedAt" field.
func SubmittedAtNEQ(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNEQ(FieldSubmittedAt, v))
}

// SubmittedAtIn applies the In predicate on the "submittedAt" field.
func SubmittedAtIn(vs ...time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIn(FieldSubmittedAt, vs...))
}

// SubmittedAtNotIn applies the NotIn predicate on the "submittedAt" field.
func SubmittedAtNotIn(vs ...time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotIn(FieldSubmittedAt, vs...))
}

// SubmittedAtGT applies the GT predicate on the "submittedAt" field.
func SubmittedAtGT(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGT(FieldSubmittedAt, v))
}

// SubmittedAtGTE applies the GTE predicate on the "submittedAt" field.
func SubmittedAtGTE(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGTE(FieldSubmittedAt, v))
}

// SubmittedAtLT applies the LT predicate on the "submittedAt" field.
func SubmittedAtLT(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLT(FieldSubmittedAt, v))
}

// SubmittedAtLTE applies the LTE predicate on the "submittedAt" field.
func SubmittedAtLTE(v time.Time) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLTE(FieldSubmittedAt, v))
}

// SubmittedAtIsNil applies the IsNil predicate on the "submittedAt" field.
func SubmittedAtIsNil() predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIsNull(FieldSubmittedAt))
}

// SubmittedAtNotNil applies the NotNil predicate on the "submittedAt" field.
func SubmittedAtNotNil() predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotNull(FieldSubmittedAt))
}

// AnswersIsNil applies the IsNil predicate on the "answers" field.
func AnswersIsNil() predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIsNull(FieldAnswers))
}

// AnswersNotNil applies the NotNil predicate on the "answers" field.
func AnswersNotNil() predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotNull(FieldAnswers))
}

// ScoreEQ applies the EQ predicate on the "score" field.
func ScoreEQ(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldEQ(FieldScore, v))
}

// ScoreNEQ applies the NEQ predicate on the "score" field.
func ScoreNEQ(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNEQ(FieldScore, v))
}

// ScoreIn applies the In predicate on the "score" field.
func ScoreIn(vs ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIn(FieldScore, vs...))
}

// ScoreNotIn applies the NotIn predicate on the "score" field.
func ScoreNotIn(vs ...int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotIn(FieldScore, vs...))
}

// ScoreGT applies the GT predicate on the "score" field.
func ScoreGT(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGT(FieldScore, v))
}

// ScoreGTE applies the GTE predicate on the "score" field.
func ScoreGTE(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldGTE(FieldScore, v))
}

// ScoreLT applies the LT predicate on the "score" field.
func ScoreLT(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLT(FieldScore, v))
}

// ScoreLTE applies the LTE predicate on the "score" field.
func ScoreLTE(v int) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldLTE(FieldScore, v))
}

// ScoreIsNil applies the IsNil predicate on the "score" field.
func ScoreIsNil() predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldIsNull(FieldScore))
}

// ScoreNotNil applies the NotNil predicate on the "score" field.
func ScoreNotNil() predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.FieldNotNull(FieldScore))
}

// HasQuiz applies the HasEdge predicate on the "quiz" edge.
func HasQuiz() predicate.QuizSubmission {
	return predicate.QuizSubmission(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuizTable, QuizColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuizWith applies the HasEdge predicate on the "quiz" edge with a given conditions (other predicates).
func HasQuizWith(preds ...predicate.Quiz) predicate.QuizSubmission {
	return predicate.QuizSubmission(func(s *sql.Selector) {
		step := newQuizStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuizSubmission) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuizSubmission) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuizSubmission) predicate.QuizSubmission {
	return predicate.QuizSubmission(sql.NotPredicates(p))
}
