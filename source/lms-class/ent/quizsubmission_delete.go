// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"lms-class/ent/predicate"
	"lms-class/ent/quizsubmission"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuizSubmissionDelete is the builder for deleting a QuizSubmission entity.
type QuizSubmissionDelete struct {
	config
	hooks    []Hook
	mutation *QuizSubmissionMutation
}

// Where appends a list predicates to the QuizSubmissionDelete builder.
func (qsd *QuizSubmissionDelete) Where(ps ...predicate.QuizSubmission) *QuizSubmissionDelete {
	qsd.mutation.Where(ps...)
	return qsd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qsd *QuizSubmissionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qsd.sqlExec, qsd.mutation, qsd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qsd *QuizSubmissionDelete) ExecX(ctx context.Context) int {
	n, err := qsd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qsd *QuizSubmissionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(quizsubmission.Table, sqlgraph.NewFieldSpec(quizsubmission.FieldID, field.TypeInt))
	if ps := qsd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qsd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qsd.mutation.done = true
	return affected, err
}

// QuizSubmissionDeleteOne is the builder for deleting a single QuizSubmission entity.
type QuizSubmissionDeleteOne struct {
	qsd *QuizSubmissionDelete
}

// Where appends a list predicates to the QuizSubmissionDelete builder.
func (qsdo *QuizSubmissionDeleteOne) Where(ps ...predicate.QuizSubmission) *QuizSubmissionDeleteOne {
	qsdo.qsd.mutation.Where(ps...)
	return qsdo
}

// Exec executes the deletion query.
func (qsdo *QuizSubmissionDeleteOne) Exec(ctx context.Context) error {
	n, err := qsdo.qsd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{quizsubmission.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qsdo *QuizSubmissionDeleteOne) ExecX(ctx context.Context) {
	if err := qsdo.Exec(ctx); err != nil {
		panic(err)
	}
}
