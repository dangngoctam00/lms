// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"lms-class/ent/predicate"
	"lms-class/ent/questionhistory"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuestionHistoryDelete is the builder for deleting a QuestionHistory entity.
type QuestionHistoryDelete struct {
	config
	hooks    []Hook
	mutation *QuestionHistoryMutation
}

// Where appends a list predicates to the QuestionHistoryDelete builder.
func (qhd *QuestionHistoryDelete) Where(ps ...predicate.QuestionHistory) *QuestionHistoryDelete {
	qhd.mutation.Where(ps...)
	return qhd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (qhd *QuestionHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, qhd.sqlExec, qhd.mutation, qhd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (qhd *QuestionHistoryDelete) ExecX(ctx context.Context) int {
	n, err := qhd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (qhd *QuestionHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(questionhistory.Table, sqlgraph.NewFieldSpec(questionhistory.FieldID, field.TypeInt))
	if ps := qhd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, qhd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	qhd.mutation.done = true
	return affected, err
}

// QuestionHistoryDeleteOne is the builder for deleting a single QuestionHistory entity.
type QuestionHistoryDeleteOne struct {
	qhd *QuestionHistoryDelete
}

// Where appends a list predicates to the QuestionHistoryDelete builder.
func (qhdo *QuestionHistoryDeleteOne) Where(ps ...predicate.QuestionHistory) *QuestionHistoryDeleteOne {
	qhdo.qhd.mutation.Where(ps...)
	return qhdo
}

// Exec executes the deletion query.
func (qhdo *QuestionHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := qhdo.qhd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{questionhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (qhdo *QuestionHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := qhdo.Exec(ctx); err != nil {
		panic(err)
	}
}
