// Code generated by ent, DO NOT EDIT.

package quiz

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the quiz type in the database.
	Label = "quiz"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldGradeTag holds the string denoting the gradetag field in the database.
	FieldGradeTag = "grade_tag"
	// FieldExamId holds the string denoting the examid field in the database.
	FieldExamId = "exam_id"
	// FieldIsPublished holds the string denoting the ispublished field in the database.
	FieldIsPublished = "is_published"
	// FieldCreatedAt holds the string denoting the createdat field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldContextId holds the string denoting the contextid field in the database.
	FieldContextId = "context_id"
	// FieldParentId holds the string denoting the parentid field in the database.
	FieldParentId = "parent_id"
	// FieldStartedAt holds the string denoting the startedat field in the database.
	FieldStartedAt = "started_at"
	// FieldFinishedAt holds the string denoting the finishedat field in the database.
	FieldFinishedAt = "finished_at"
	// FieldTimeLimit holds the string denoting the timelimit field in the database.
	FieldTimeLimit = "time_limit"
	// FieldMaxAttempt holds the string denoting the maxattempt field in the database.
	FieldMaxAttempt = "max_attempt"
	// FieldViewPreviousSessions holds the string denoting the viewprevioussessions field in the database.
	FieldViewPreviousSessions = "view_previous_sessions"
	// FieldViewPreviousSessionsTime holds the string denoting the viewprevioussessionstime field in the database.
	FieldViewPreviousSessionsTime = "view_previous_sessions_time"
	// FieldPassedScore holds the string denoting the passedscore field in the database.
	FieldPassedScore = "passed_score"
	// FieldFinalGradedStrategy holds the string denoting the finalgradedstrategy field in the database.
	FieldFinalGradedStrategy = "final_graded_strategy"
	// EdgeExam holds the string denoting the exam edge name in mutations.
	EdgeExam = "exam"
	// EdgeSubmissions holds the string denoting the submissions edge name in mutations.
	EdgeSubmissions = "submissions"
	// Table holds the table name of the quiz in the database.
	Table = "quiz"
	// ExamTable is the table that holds the exam relation/edge.
	ExamTable = "quiz"
	// ExamInverseTable is the table name for the Exam entity.
	// It exists in this package in order to avoid circular dependency with the "exam" package.
	ExamInverseTable = "exam"
	// ExamColumn is the table column denoting the exam relation/edge.
	ExamColumn = "exam_id"
	// SubmissionsTable is the table that holds the submissions relation/edge.
	SubmissionsTable = "quiz_submission"
	// SubmissionsInverseTable is the table name for the QuizSubmission entity.
	// It exists in this package in order to avoid circular dependency with the "quizsubmission" package.
	SubmissionsInverseTable = "quiz_submission"
	// SubmissionsColumn is the table column denoting the submissions relation/edge.
	SubmissionsColumn = "quiz_id"
)

// Columns holds all SQL columns for quiz fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldGradeTag,
	FieldExamId,
	FieldIsPublished,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldContext,
	FieldContextId,
	FieldParentId,
	FieldStartedAt,
	FieldFinishedAt,
	FieldTimeLimit,
	FieldMaxAttempt,
	FieldViewPreviousSessions,
	FieldViewPreviousSessionsTime,
	FieldPassedScore,
	FieldFinalGradedStrategy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Quiz queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByGradeTag orders the results by the gradeTag field.
func ByGradeTag(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGradeTag, opts...).ToFunc()
}

// ByExamId orders the results by the examId field.
func ByExamId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExamId, opts...).ToFunc()
}

// ByIsPublished orders the results by the isPublished field.
func ByIsPublished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublished, opts...).ToFunc()
}

// ByCreatedAt orders the results by the createdAt field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByContextId orders the results by the contextId field.
func ByContextId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContextId, opts...).ToFunc()
}

// ByParentId orders the results by the parentId field.
func ByParentId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParentId, opts...).ToFunc()
}

// ByStartedAt orders the results by the startedAt field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByFinishedAt orders the results by the finishedAt field.
func ByFinishedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinishedAt, opts...).ToFunc()
}

// ByTimeLimit orders the results by the timeLimit field.
func ByTimeLimit(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeLimit, opts...).ToFunc()
}

// ByMaxAttempt orders the results by the maxAttempt field.
func ByMaxAttempt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxAttempt, opts...).ToFunc()
}

// ByViewPreviousSessions orders the results by the viewPreviousSessions field.
func ByViewPreviousSessions(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewPreviousSessions, opts...).ToFunc()
}

// ByViewPreviousSessionsTime orders the results by the viewPreviousSessionsTime field.
func ByViewPreviousSessionsTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldViewPreviousSessionsTime, opts...).ToFunc()
}

// ByPassedScore orders the results by the passedScore field.
func ByPassedScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassedScore, opts...).ToFunc()
}

// ByFinalGradedStrategy orders the results by the finalGradedStrategy field.
func ByFinalGradedStrategy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalGradedStrategy, opts...).ToFunc()
}

// ByExamField orders the results by exam field.
func ByExamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newExamStep(), sql.OrderByField(field, opts...))
	}
}

// BySubmissionsCount orders the results by submissions count.
func BySubmissionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubmissionsStep(), opts...)
	}
}

// BySubmissions orders the results by submissions terms.
func BySubmissions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubmissionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newExamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ExamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
	)
}
func newSubmissionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubmissionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubmissionsTable, SubmissionsColumn),
	)
}
