// Code generated by ent, DO NOT EDIT.

package quiz

import (
	"lms-class/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldDescription, v))
}

// GradeTag applies equality check predicate on the "gradeTag" field. It's identical to GradeTagEQ.
func GradeTag(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldGradeTag, v))
}

// ExamId applies equality check predicate on the "examId" field. It's identical to ExamIdEQ.
func ExamId(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldExamId, v))
}

// IsPublished applies equality check predicate on the "isPublished" field. It's identical to IsPublishedEQ.
func IsPublished(v bool) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldIsPublished, v))
}

// CreatedAt applies equality check predicate on the "createdAt" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updatedAt" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldUpdatedAt, v))
}

// Context applies equality check predicate on the "context" field. It's identical to ContextEQ.
func Context(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldContext, v))
}

// ContextId applies equality check predicate on the "contextId" field. It's identical to ContextIdEQ.
func ContextId(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldContextId, v))
}

// ParentId applies equality check predicate on the "parentId" field. It's identical to ParentIdEQ.
func ParentId(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldParentId, v))
}

// StartedAt applies equality check predicate on the "startedAt" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldStartedAt, v))
}

// FinishedAt applies equality check predicate on the "finishedAt" field. It's identical to FinishedAtEQ.
func FinishedAt(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldFinishedAt, v))
}

// TimeLimit applies equality check predicate on the "timeLimit" field. It's identical to TimeLimitEQ.
func TimeLimit(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldTimeLimit, v))
}

// MaxAttempt applies equality check predicate on the "maxAttempt" field. It's identical to MaxAttemptEQ.
func MaxAttempt(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldMaxAttempt, v))
}

// ViewPreviousSessions applies equality check predicate on the "viewPreviousSessions" field. It's identical to ViewPreviousSessionsEQ.
func ViewPreviousSessions(v bool) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldViewPreviousSessions, v))
}

// ViewPreviousSessionsTime applies equality check predicate on the "viewPreviousSessionsTime" field. It's identical to ViewPreviousSessionsTimeEQ.
func ViewPreviousSessionsTime(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldViewPreviousSessionsTime, v))
}

// PassedScore applies equality check predicate on the "passedScore" field. It's identical to PassedScoreEQ.
func PassedScore(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldPassedScore, v))
}

// FinalGradedStrategy applies equality check predicate on the "finalGradedStrategy" field. It's identical to FinalGradedStrategyEQ.
func FinalGradedStrategy(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldFinalGradedStrategy, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldDescription, v))
}

// GradeTagEQ applies the EQ predicate on the "gradeTag" field.
func GradeTagEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldGradeTag, v))
}

// GradeTagNEQ applies the NEQ predicate on the "gradeTag" field.
func GradeTagNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldGradeTag, v))
}

// GradeTagIn applies the In predicate on the "gradeTag" field.
func GradeTagIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldGradeTag, vs...))
}

// GradeTagNotIn applies the NotIn predicate on the "gradeTag" field.
func GradeTagNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldGradeTag, vs...))
}

// GradeTagGT applies the GT predicate on the "gradeTag" field.
func GradeTagGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldGradeTag, v))
}

// GradeTagGTE applies the GTE predicate on the "gradeTag" field.
func GradeTagGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldGradeTag, v))
}

// GradeTagLT applies the LT predicate on the "gradeTag" field.
func GradeTagLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldGradeTag, v))
}

// GradeTagLTE applies the LTE predicate on the "gradeTag" field.
func GradeTagLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldGradeTag, v))
}

// GradeTagContains applies the Contains predicate on the "gradeTag" field.
func GradeTagContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldGradeTag, v))
}

// GradeTagHasPrefix applies the HasPrefix predicate on the "gradeTag" field.
func GradeTagHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldGradeTag, v))
}

// GradeTagHasSuffix applies the HasSuffix predicate on the "gradeTag" field.
func GradeTagHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldGradeTag, v))
}

// GradeTagEqualFold applies the EqualFold predicate on the "gradeTag" field.
func GradeTagEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldGradeTag, v))
}

// GradeTagContainsFold applies the ContainsFold predicate on the "gradeTag" field.
func GradeTagContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldGradeTag, v))
}

// ExamIdEQ applies the EQ predicate on the "examId" field.
func ExamIdEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldExamId, v))
}

// ExamIdNEQ applies the NEQ predicate on the "examId" field.
func ExamIdNEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldExamId, v))
}

// ExamIdIn applies the In predicate on the "examId" field.
func ExamIdIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldExamId, vs...))
}

// ExamIdNotIn applies the NotIn predicate on the "examId" field.
func ExamIdNotIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldExamId, vs...))
}

// ExamIdIsNil applies the IsNil predicate on the "examId" field.
func ExamIdIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldExamId))
}

// ExamIdNotNil applies the NotNil predicate on the "examId" field.
func ExamIdNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldExamId))
}

// IsPublishedEQ applies the EQ predicate on the "isPublished" field.
func IsPublishedEQ(v bool) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldIsPublished, v))
}

// IsPublishedNEQ applies the NEQ predicate on the "isPublished" field.
func IsPublishedNEQ(v bool) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldIsPublished, v))
}

// CreatedAtEQ applies the EQ predicate on the "createdAt" field.
func CreatedAtEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "createdAt" field.
func CreatedAtNEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "createdAt" field.
func CreatedAtIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "createdAt" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "createdAt" field.
func CreatedAtGT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "createdAt" field.
func CreatedAtGTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "createdAt" field.
func CreatedAtLT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "createdAt" field.
func CreatedAtLTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updatedAt" field.
func UpdatedAtEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updatedAt" field.
func UpdatedAtNEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updatedAt" field.
func UpdatedAtIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updatedAt" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updatedAt" field.
func UpdatedAtGT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updatedAt" field.
func UpdatedAtGTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updatedAt" field.
func UpdatedAtLT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updatedAt" field.
func UpdatedAtLTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldUpdatedAt, v))
}

// ContextEQ applies the EQ predicate on the "context" field.
func ContextEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldContext, v))
}

// ContextNEQ applies the NEQ predicate on the "context" field.
func ContextNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldContext, v))
}

// ContextIn applies the In predicate on the "context" field.
func ContextIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldContext, vs...))
}

// ContextNotIn applies the NotIn predicate on the "context" field.
func ContextNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldContext, vs...))
}

// ContextGT applies the GT predicate on the "context" field.
func ContextGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldContext, v))
}

// ContextGTE applies the GTE predicate on the "context" field.
func ContextGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldContext, v))
}

// ContextLT applies the LT predicate on the "context" field.
func ContextLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldContext, v))
}

// ContextLTE applies the LTE predicate on the "context" field.
func ContextLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldContext, v))
}

// ContextContains applies the Contains predicate on the "context" field.
func ContextContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldContext, v))
}

// ContextHasPrefix applies the HasPrefix predicate on the "context" field.
func ContextHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldContext, v))
}

// ContextHasSuffix applies the HasSuffix predicate on the "context" field.
func ContextHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldContext, v))
}

// ContextEqualFold applies the EqualFold predicate on the "context" field.
func ContextEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldContext, v))
}

// ContextContainsFold applies the ContainsFold predicate on the "context" field.
func ContextContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldContext, v))
}

// ContextIdEQ applies the EQ predicate on the "contextId" field.
func ContextIdEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldContextId, v))
}

// ContextIdNEQ applies the NEQ predicate on the "contextId" field.
func ContextIdNEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldContextId, v))
}

// ContextIdIn applies the In predicate on the "contextId" field.
func ContextIdIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldContextId, vs...))
}

// ContextIdNotIn applies the NotIn predicate on the "contextId" field.
func ContextIdNotIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldContextId, vs...))
}

// ContextIdGT applies the GT predicate on the "contextId" field.
func ContextIdGT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldContextId, v))
}

// ContextIdGTE applies the GTE predicate on the "contextId" field.
func ContextIdGTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldContextId, v))
}

// ContextIdLT applies the LT predicate on the "contextId" field.
func ContextIdLT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldContextId, v))
}

// ContextIdLTE applies the LTE predicate on the "contextId" field.
func ContextIdLTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldContextId, v))
}

// ParentIdEQ applies the EQ predicate on the "parentId" field.
func ParentIdEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldParentId, v))
}

// ParentIdNEQ applies the NEQ predicate on the "parentId" field.
func ParentIdNEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldParentId, v))
}

// ParentIdIn applies the In predicate on the "parentId" field.
func ParentIdIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldParentId, vs...))
}

// ParentIdNotIn applies the NotIn predicate on the "parentId" field.
func ParentIdNotIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldParentId, vs...))
}

// ParentIdGT applies the GT predicate on the "parentId" field.
func ParentIdGT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldParentId, v))
}

// ParentIdGTE applies the GTE predicate on the "parentId" field.
func ParentIdGTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldParentId, v))
}

// ParentIdLT applies the LT predicate on the "parentId" field.
func ParentIdLT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldParentId, v))
}

// ParentIdLTE applies the LTE predicate on the "parentId" field.
func ParentIdLTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldParentId, v))
}

// ParentIdIsNil applies the IsNil predicate on the "parentId" field.
func ParentIdIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldParentId))
}

// ParentIdNotNil applies the NotNil predicate on the "parentId" field.
func ParentIdNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldParentId))
}

// StartedAtEQ applies the EQ predicate on the "startedAt" field.
func StartedAtEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "startedAt" field.
func StartedAtNEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "startedAt" field.
func StartedAtIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "startedAt" field.
func StartedAtNotIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "startedAt" field.
func StartedAtGT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "startedAt" field.
func StartedAtGTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "startedAt" field.
func StartedAtLT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "startedAt" field.
func StartedAtLTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "startedAt" field.
func StartedAtIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "startedAt" field.
func StartedAtNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldStartedAt))
}

// FinishedAtEQ applies the EQ predicate on the "finishedAt" field.
func FinishedAtEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldFinishedAt, v))
}

// FinishedAtNEQ applies the NEQ predicate on the "finishedAt" field.
func FinishedAtNEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldFinishedAt, v))
}

// FinishedAtIn applies the In predicate on the "finishedAt" field.
func FinishedAtIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldFinishedAt, vs...))
}

// FinishedAtNotIn applies the NotIn predicate on the "finishedAt" field.
func FinishedAtNotIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldFinishedAt, vs...))
}

// FinishedAtGT applies the GT predicate on the "finishedAt" field.
func FinishedAtGT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldFinishedAt, v))
}

// FinishedAtGTE applies the GTE predicate on the "finishedAt" field.
func FinishedAtGTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldFinishedAt, v))
}

// FinishedAtLT applies the LT predicate on the "finishedAt" field.
func FinishedAtLT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldFinishedAt, v))
}

// FinishedAtLTE applies the LTE predicate on the "finishedAt" field.
func FinishedAtLTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldFinishedAt, v))
}

// FinishedAtIsNil applies the IsNil predicate on the "finishedAt" field.
func FinishedAtIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldFinishedAt))
}

// FinishedAtNotNil applies the NotNil predicate on the "finishedAt" field.
func FinishedAtNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldFinishedAt))
}

// TimeLimitEQ applies the EQ predicate on the "timeLimit" field.
func TimeLimitEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldTimeLimit, v))
}

// TimeLimitNEQ applies the NEQ predicate on the "timeLimit" field.
func TimeLimitNEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldTimeLimit, v))
}

// TimeLimitIn applies the In predicate on the "timeLimit" field.
func TimeLimitIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldTimeLimit, vs...))
}

// TimeLimitNotIn applies the NotIn predicate on the "timeLimit" field.
func TimeLimitNotIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldTimeLimit, vs...))
}

// TimeLimitGT applies the GT predicate on the "timeLimit" field.
func TimeLimitGT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldTimeLimit, v))
}

// TimeLimitGTE applies the GTE predicate on the "timeLimit" field.
func TimeLimitGTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldTimeLimit, v))
}

// TimeLimitLT applies the LT predicate on the "timeLimit" field.
func TimeLimitLT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldTimeLimit, v))
}

// TimeLimitLTE applies the LTE predicate on the "timeLimit" field.
func TimeLimitLTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldTimeLimit, v))
}

// TimeLimitIsNil applies the IsNil predicate on the "timeLimit" field.
func TimeLimitIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldTimeLimit))
}

// TimeLimitNotNil applies the NotNil predicate on the "timeLimit" field.
func TimeLimitNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldTimeLimit))
}

// MaxAttemptEQ applies the EQ predicate on the "maxAttempt" field.
func MaxAttemptEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldMaxAttempt, v))
}

// MaxAttemptNEQ applies the NEQ predicate on the "maxAttempt" field.
func MaxAttemptNEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldMaxAttempt, v))
}

// MaxAttemptIn applies the In predicate on the "maxAttempt" field.
func MaxAttemptIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldMaxAttempt, vs...))
}

// MaxAttemptNotIn applies the NotIn predicate on the "maxAttempt" field.
func MaxAttemptNotIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldMaxAttempt, vs...))
}

// MaxAttemptGT applies the GT predicate on the "maxAttempt" field.
func MaxAttemptGT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldMaxAttempt, v))
}

// MaxAttemptGTE applies the GTE predicate on the "maxAttempt" field.
func MaxAttemptGTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldMaxAttempt, v))
}

// MaxAttemptLT applies the LT predicate on the "maxAttempt" field.
func MaxAttemptLT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldMaxAttempt, v))
}

// MaxAttemptLTE applies the LTE predicate on the "maxAttempt" field.
func MaxAttemptLTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldMaxAttempt, v))
}

// MaxAttemptIsNil applies the IsNil predicate on the "maxAttempt" field.
func MaxAttemptIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldMaxAttempt))
}

// MaxAttemptNotNil applies the NotNil predicate on the "maxAttempt" field.
func MaxAttemptNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldMaxAttempt))
}

// ViewPreviousSessionsEQ applies the EQ predicate on the "viewPreviousSessions" field.
func ViewPreviousSessionsEQ(v bool) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldViewPreviousSessions, v))
}

// ViewPreviousSessionsNEQ applies the NEQ predicate on the "viewPreviousSessions" field.
func ViewPreviousSessionsNEQ(v bool) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldViewPreviousSessions, v))
}

// ViewPreviousSessionsTimeEQ applies the EQ predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldViewPreviousSessionsTime, v))
}

// ViewPreviousSessionsTimeNEQ applies the NEQ predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeNEQ(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldViewPreviousSessionsTime, v))
}

// ViewPreviousSessionsTimeIn applies the In predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldViewPreviousSessionsTime, vs...))
}

// ViewPreviousSessionsTimeNotIn applies the NotIn predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeNotIn(vs ...time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldViewPreviousSessionsTime, vs...))
}

// ViewPreviousSessionsTimeGT applies the GT predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeGT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldViewPreviousSessionsTime, v))
}

// ViewPreviousSessionsTimeGTE applies the GTE predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeGTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldViewPreviousSessionsTime, v))
}

// ViewPreviousSessionsTimeLT applies the LT predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeLT(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldViewPreviousSessionsTime, v))
}

// ViewPreviousSessionsTimeLTE applies the LTE predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeLTE(v time.Time) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldViewPreviousSessionsTime, v))
}

// ViewPreviousSessionsTimeIsNil applies the IsNil predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldViewPreviousSessionsTime))
}

// ViewPreviousSessionsTimeNotNil applies the NotNil predicate on the "viewPreviousSessionsTime" field.
func ViewPreviousSessionsTimeNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldViewPreviousSessionsTime))
}

// PassedScoreEQ applies the EQ predicate on the "passedScore" field.
func PassedScoreEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldPassedScore, v))
}

// PassedScoreNEQ applies the NEQ predicate on the "passedScore" field.
func PassedScoreNEQ(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldPassedScore, v))
}

// PassedScoreIn applies the In predicate on the "passedScore" field.
func PassedScoreIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldPassedScore, vs...))
}

// PassedScoreNotIn applies the NotIn predicate on the "passedScore" field.
func PassedScoreNotIn(vs ...int) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldPassedScore, vs...))
}

// PassedScoreGT applies the GT predicate on the "passedScore" field.
func PassedScoreGT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldPassedScore, v))
}

// PassedScoreGTE applies the GTE predicate on the "passedScore" field.
func PassedScoreGTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldPassedScore, v))
}

// PassedScoreLT applies the LT predicate on the "passedScore" field.
func PassedScoreLT(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldPassedScore, v))
}

// PassedScoreLTE applies the LTE predicate on the "passedScore" field.
func PassedScoreLTE(v int) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldPassedScore, v))
}

// PassedScoreIsNil applies the IsNil predicate on the "passedScore" field.
func PassedScoreIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldPassedScore))
}

// PassedScoreNotNil applies the NotNil predicate on the "passedScore" field.
func PassedScoreNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldPassedScore))
}

// FinalGradedStrategyEQ applies the EQ predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEQ(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyNEQ applies the NEQ predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyNEQ(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNEQ(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyIn applies the In predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldIn(FieldFinalGradedStrategy, vs...))
}

// FinalGradedStrategyNotIn applies the NotIn predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyNotIn(vs ...string) predicate.Quiz {
	return predicate.Quiz(sql.FieldNotIn(FieldFinalGradedStrategy, vs...))
}

// FinalGradedStrategyGT applies the GT predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyGT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGT(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyGTE applies the GTE predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyGTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldGTE(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyLT applies the LT predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyLT(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLT(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyLTE applies the LTE predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyLTE(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldLTE(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyContains applies the Contains predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyContains(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContains(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyHasPrefix applies the HasPrefix predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyHasPrefix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasPrefix(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyHasSuffix applies the HasSuffix predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyHasSuffix(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldHasSuffix(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyIsNil applies the IsNil predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyIsNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldIsNull(FieldFinalGradedStrategy))
}

// FinalGradedStrategyNotNil applies the NotNil predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyNotNil() predicate.Quiz {
	return predicate.Quiz(sql.FieldNotNull(FieldFinalGradedStrategy))
}

// FinalGradedStrategyEqualFold applies the EqualFold predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyEqualFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldEqualFold(FieldFinalGradedStrategy, v))
}

// FinalGradedStrategyContainsFold applies the ContainsFold predicate on the "finalGradedStrategy" field.
func FinalGradedStrategyContainsFold(v string) predicate.Quiz {
	return predicate.Quiz(sql.FieldContainsFold(FieldFinalGradedStrategy, v))
}

// HasExam applies the HasEdge predicate on the "exam" edge.
func HasExam() predicate.Quiz {
	return predicate.Quiz(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ExamTable, ExamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasExamWith applies the HasEdge predicate on the "exam" edge with a given conditions (other predicates).
func HasExamWith(preds ...predicate.Exam) predicate.Quiz {
	return predicate.Quiz(func(s *sql.Selector) {
		step := newExamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSubmissions applies the HasEdge predicate on the "submissions" edge.
func HasSubmissions() predicate.Quiz {
	return predicate.Quiz(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubmissionsTable, SubmissionsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubmissionsWith applies the HasEdge predicate on the "submissions" edge with a given conditions (other predicates).
func HasSubmissionsWith(preds ...predicate.QuizSubmission) predicate.Quiz {
	return predicate.Quiz(func(s *sql.Selector) {
		step := newSubmissionsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Quiz) predicate.Quiz {
	return predicate.Quiz(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Quiz) predicate.Quiz {
	return predicate.Quiz(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Quiz) predicate.Quiz {
	return predicate.Quiz(sql.NotPredicates(p))
}
