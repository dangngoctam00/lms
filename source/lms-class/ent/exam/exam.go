// Code generated by ent, DO NOT EDIT.

package exam

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the exam type in the database.
	Label = "exam"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContext holds the string denoting the context field in the database.
	FieldContext = "context"
	// FieldContextId holds the string denoting the contextid field in the database.
	FieldContextId = "context_id"
	// FieldIsPublished holds the string denoting the ispublished field in the database.
	FieldIsPublished = "is_published"
	// FieldUpdatedAt holds the string denoting the updatedat field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the exam in the database.
	Table = "exams"
)

// Columns holds all SQL columns for exam fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldContext,
	FieldContextId,
	FieldIsPublished,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Exam queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByContext orders the results by the context field.
func ByContext(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContext, opts...).ToFunc()
}

// ByContextId orders the results by the contextId field.
func ByContextId(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContextId, opts...).ToFunc()
}

// ByIsPublished orders the results by the isPublished field.
func ByIsPublished(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPublished, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updatedAt field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
